// <auto-generated />
using System;
using Adaplio.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Adaplio.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Adaplio.Api.Domain.AdherenceWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal>("AdherencePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("adherence_percentage");

                    b.Property<decimal?>("AverageDifficultyRating")
                        .HasPrecision(3, 1)
                        .HasColumnType("TEXT")
                        .HasColumnName("average_difficulty_rating");

                    b.Property<decimal?>("AveragePainLevel")
                        .HasPrecision(3, 1)
                        .HasColumnType("TEXT")
                        .HasColumnName("average_pain_level");

                    b.Property<DateTimeOffset>("CalculatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("calculated_at");

                    b.Property<int>("ClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_profile_id");

                    b.Property<int?>("PlanInstanceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plan_instance_id");

                    b.Property<int>("TotalExercisesCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_exercises_completed");

                    b.Property<int>("TotalExercisesPlanned")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_exercises_planned");

                    b.Property<int>("TotalHoldSecondsCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_hold_seconds_completed");

                    b.Property<int>("TotalHoldSecondsPlanned")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_hold_seconds_planned");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("week_number");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("week_start_date");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("PlanInstanceId");

                    b.HasIndex("ClientProfileId", "Year", "WeekNumber")
                        .IsUnique();

                    b.ToTable("adherence_week");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_verified");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("app_user");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ClientProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("alias");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("PreferencesJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("preferences_json");

                    b.Property<string>("Timezone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("timezone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasFilter("alias IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("client_profile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ConsentGrant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_profile_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<DateTimeOffset>("GrantedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("granted_at");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("scope");

                    b.Property<int>("TrainerProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trainer_profile_id");

                    b.HasKey("Id");

                    b.HasIndex("TrainerProfileId");

                    b.HasIndex("ClientProfileId", "TrainerProfileId", "Scope")
                        .IsUnique()
                        .HasFilter("revoked_at IS NULL");

                    b.ToTable("consent_grant");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("DefaultHoldSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("default_hold_seconds");

                    b.Property<int?>("DefaultReps")
                        .HasColumnType("INTEGER")
                        .HasColumnName("default_reps");

                    b.Property<int?>("DefaultSets")
                        .HasColumnType("INTEGER")
                        .HasColumnName("default_sets");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT")
                        .HasColumnName("instructions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("exercise");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ExerciseInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER")
                        .HasColumnName("day_of_week");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("exercise_id");

                    b.Property<int?>("FrequencyPerWeek")
                        .HasColumnType("INTEGER")
                        .HasColumnName("frequency_per_week");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_index");

                    b.Property<int>("PlanInstanceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plan_instance_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<int?>("TargetHoldSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_hold_seconds");

                    b.Property<int?>("TargetReps")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_reps");

                    b.Property<int?>("TargetSets")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_sets");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("week_number");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("PlanInstanceId");

                    b.ToTable("exercise_instance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ExtractionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("TEXT")
                        .HasColumnName("confidence_score");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("ExtractedDataJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extracted_data_json");

                    b.Property<string>("ExtractionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("extraction_type");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_confirmed");

                    b.Property<int>("MediaAssetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("media_asset_id");

                    b.HasKey("Id");

                    b.HasIndex("MediaAssetId");

                    b.ToTable("extraction_result");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.Gamification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("BadgesEarned")
                        .HasColumnType("TEXT")
                        .HasColumnName("badges_earned");

                    b.Property<int>("ClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_profile_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_level");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_streak");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_activity_date");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("INTEGER")
                        .HasColumnName("longest_streak");

                    b.Property<string>("MilestonesReached")
                        .HasColumnType("TEXT")
                        .HasColumnName("milestones_reached");

                    b.Property<int>("TotalExercisesCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_exercises_completed");

                    b.Property<int>("TotalHoldSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_hold_seconds");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_sessions");

                    b.Property<int>("TotalXp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_xp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("WeeklyGoalsMet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("weekly_goals_met");

                    b.HasKey("Id");

                    b.HasIndex("ClientProfileId")
                        .IsUnique();

                    b.ToTable("gamification");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.GrantCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_address");

                    b.Property<int>("TrainerProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trainer_profile_id");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_at");

                    b.Property<int?>("UsedByClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("used_by_client_profile_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UsedByClientProfileId");

                    b.HasIndex("TrainerProfileId", "CreatedAt");

                    b.ToTable("grant_code");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.MagicLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_address");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Email", "CreatedAt");

                    b.ToTable("magic_link");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.MediaAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("ClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_profile_id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("content_type");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_size");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("filename");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("metadata_json");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("storage_path");

                    b.Property<DateTimeOffset>("UploadedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientProfileId");

                    b.ToTable("media_asset");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("actual_end_date");

                    b.Property<int>("ClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_profile_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("PlanProposalId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plan_proposal_id");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("planned_end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientProfileId");

                    b.HasIndex("PlanProposalId")
                        .IsUnique();

                    b.ToTable("plan_instance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanItemAcceptance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Accepted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accepted");

                    b.Property<DateTimeOffset>("AcceptedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("accepted_at");

                    b.Property<int>("ExerciseInstanceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("exercise_instance_id");

                    b.Property<int?>("ModifiedHoldSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("modified_hold_seconds");

                    b.Property<int?>("ModifiedReps")
                        .HasColumnType("INTEGER")
                        .HasColumnName("modified_reps");

                    b.Property<int?>("ModifiedSets")
                        .HasColumnType("INTEGER")
                        .HasColumnName("modified_sets");

                    b.Property<int>("PlanInstanceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plan_instance_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseInstanceId");

                    b.HasIndex("PlanInstanceId");

                    b.ToTable("plan_item_acceptance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_profile_id");

                    b.Property<string>("CustomPlanJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("custom_plan_json");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<int?>("PlanTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plan_template_id");

                    b.Property<string>("ProposalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("proposal_name");

                    b.Property<DateTimeOffset>("ProposedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("proposed_at");

                    b.Property<DateTimeOffset?>("RespondedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("responded_at");

                    b.Property<DateOnly?>("StartsOn")
                        .HasColumnType("TEXT")
                        .HasColumnName("starts_on");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<int>("TrainerProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trainer_profile_id");

                    b.HasKey("Id");

                    b.HasIndex("ClientProfileId");

                    b.HasIndex("PlanTemplateId");

                    b.HasIndex("TrainerProfileId");

                    b.ToTable("plan_proposal");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int?>("DurationWeeks")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration_weeks");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("TrainerProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trainer_profile_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TrainerProfileId");

                    b.ToTable("plan_template");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanTemplateItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("DaysOfWeek")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("days_of_week");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("exercise_id");

                    b.Property<int?>("FrequencyPerWeek")
                        .HasColumnType("INTEGER")
                        .HasColumnName("frequency_per_week");

                    b.Property<int?>("HoldSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hold_seconds");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_index");

                    b.Property<int>("PlanTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plan_template_id");

                    b.Property<int?>("Reps")
                        .HasColumnType("INTEGER")
                        .HasColumnName("reps");

                    b.Property<int?>("Sets")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sets");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("PlanTemplateId");

                    b.ToTable("plan_template_item");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ProgressEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ClientProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_profile_id");

                    b.Property<int?>("DifficultyRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("difficulty_rating");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("event_type");

                    b.Property<int>("ExerciseInstanceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("exercise_instance_id");

                    b.Property<int?>("HoldSecondsCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hold_seconds_completed");

                    b.Property<DateTimeOffset>("LoggedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("logged_at");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<int?>("PainLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pain_level");

                    b.Property<int?>("RepsCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("reps_completed");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<int?>("SetsCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sets_completed");

                    b.HasKey("Id");

                    b.HasIndex("ClientProfileId");

                    b.HasIndex("ExerciseInstanceId");

                    b.ToTable("progress_event");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.TrainerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT")
                        .HasColumnName("bio");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("license_number");

                    b.Property<bool>("MfaEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mfa_enabled");

                    b.Property<string>("MfaSecret")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mfa_secret");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("PracticeName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("practice_name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("trainer_profile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("TEXT")
                        .HasColumnName("confidence_score");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<int>("MediaAssetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("media_asset_id");

                    b.Property<int?>("ProcessingTimeMs")
                        .HasColumnType("INTEGER")
                        .HasColumnName("processing_time_ms");

                    b.Property<string>("SegmentsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("segments_json");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("text_content");

                    b.HasKey("Id");

                    b.HasIndex("MediaAssetId")
                        .IsUnique();

                    b.ToTable("transcript");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.AdherenceWeek", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "ClientProfile")
                        .WithMany("AdherenceWeeks")
                        .HasForeignKey("ClientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.PlanInstance", "PlanInstance")
                        .WithMany()
                        .HasForeignKey("PlanInstanceId");

                    b.Navigation("ClientProfile");

                    b.Navigation("PlanInstance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ClientProfile", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.AppUser", "User")
                        .WithOne("ClientProfile")
                        .HasForeignKey("Adaplio.Api.Domain.ClientProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ConsentGrant", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "ClientProfile")
                        .WithMany("ConsentGrants")
                        .HasForeignKey("ClientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.TrainerProfile", "TrainerProfile")
                        .WithMany("ConsentGrants")
                        .HasForeignKey("TrainerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientProfile");

                    b.Navigation("TrainerProfile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ExerciseInstance", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.Exercise", "Exercise")
                        .WithMany("ExerciseInstances")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.PlanInstance", "PlanInstance")
                        .WithMany("ExerciseInstances")
                        .HasForeignKey("PlanInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("PlanInstance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ExtractionResult", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.MediaAsset", "MediaAsset")
                        .WithMany("ExtractionResults")
                        .HasForeignKey("MediaAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaAsset");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.Gamification", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "ClientProfile")
                        .WithOne("Gamification")
                        .HasForeignKey("Adaplio.Api.Domain.Gamification", "ClientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProfile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.GrantCode", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.TrainerProfile", "TrainerProfile")
                        .WithMany()
                        .HasForeignKey("TrainerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "UsedByClientProfile")
                        .WithMany()
                        .HasForeignKey("UsedByClientProfileId");

                    b.Navigation("TrainerProfile");

                    b.Navigation("UsedByClientProfile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.MediaAsset", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "ClientProfile")
                        .WithMany()
                        .HasForeignKey("ClientProfileId");

                    b.Navigation("ClientProfile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanInstance", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "ClientProfile")
                        .WithMany("PlanInstances")
                        .HasForeignKey("ClientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.PlanProposal", "PlanProposal")
                        .WithOne("PlanInstance")
                        .HasForeignKey("Adaplio.Api.Domain.PlanInstance", "PlanProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProfile");

                    b.Navigation("PlanProposal");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanItemAcceptance", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ExerciseInstance", "ExerciseInstance")
                        .WithMany()
                        .HasForeignKey("ExerciseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.PlanInstance", "PlanInstance")
                        .WithMany("PlanItemAcceptances")
                        .HasForeignKey("PlanInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseInstance");

                    b.Navigation("PlanInstance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanProposal", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "ClientProfile")
                        .WithMany()
                        .HasForeignKey("ClientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.PlanTemplate", "PlanTemplate")
                        .WithMany("PlanProposals")
                        .HasForeignKey("PlanTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Adaplio.Api.Domain.TrainerProfile", "TrainerProfile")
                        .WithMany("PlanProposals")
                        .HasForeignKey("TrainerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProfile");

                    b.Navigation("PlanTemplate");

                    b.Navigation("TrainerProfile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanTemplate", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.TrainerProfile", "TrainerProfile")
                        .WithMany("PlanTemplates")
                        .HasForeignKey("TrainerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainerProfile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanTemplateItem", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.Exercise", "Exercise")
                        .WithMany("PlanTemplateItems")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.PlanTemplate", "PlanTemplate")
                        .WithMany("PlanTemplateItems")
                        .HasForeignKey("PlanTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("PlanTemplate");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ProgressEvent", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.ClientProfile", "ClientProfile")
                        .WithMany("ProgressEvents")
                        .HasForeignKey("ClientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adaplio.Api.Domain.ExerciseInstance", "ExerciseInstance")
                        .WithMany("ProgressEvents")
                        .HasForeignKey("ExerciseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientProfile");

                    b.Navigation("ExerciseInstance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.TrainerProfile", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.AppUser", "User")
                        .WithOne("TrainerProfile")
                        .HasForeignKey("Adaplio.Api.Domain.TrainerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.Transcript", b =>
                {
                    b.HasOne("Adaplio.Api.Domain.MediaAsset", "MediaAsset")
                        .WithOne("Transcript")
                        .HasForeignKey("Adaplio.Api.Domain.Transcript", "MediaAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaAsset");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.AppUser", b =>
                {
                    b.Navigation("ClientProfile");

                    b.Navigation("TrainerProfile");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ClientProfile", b =>
                {
                    b.Navigation("AdherenceWeeks");

                    b.Navigation("ConsentGrants");

                    b.Navigation("Gamification");

                    b.Navigation("PlanInstances");

                    b.Navigation("ProgressEvents");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.Exercise", b =>
                {
                    b.Navigation("ExerciseInstances");

                    b.Navigation("PlanTemplateItems");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.ExerciseInstance", b =>
                {
                    b.Navigation("ProgressEvents");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.MediaAsset", b =>
                {
                    b.Navigation("ExtractionResults");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanInstance", b =>
                {
                    b.Navigation("ExerciseInstances");

                    b.Navigation("PlanItemAcceptances");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanProposal", b =>
                {
                    b.Navigation("PlanInstance");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.PlanTemplate", b =>
                {
                    b.Navigation("PlanProposals");

                    b.Navigation("PlanTemplateItems");
                });

            modelBuilder.Entity("Adaplio.Api.Domain.TrainerProfile", b =>
                {
                    b.Navigation("ConsentGrants");

                    b.Navigation("PlanProposals");

                    b.Navigation("PlanTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}

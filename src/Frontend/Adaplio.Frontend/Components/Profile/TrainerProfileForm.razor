@using Adaplio.Frontend.Components.Profile
@inject ISnackbar Snackbar

<div class="settings-content">
    <div class="settings-header">
        <h2>Clinic Information</h2>
        <p>Manage your professional details and clinic information.</p>
    </div>

    <div class="settings-grid">
        <!-- Professional Information -->
        <ProfileCard Title="Professional Details"
                    Icon="@Icons.Material.Filled.Badge">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_displayName"
                                 Label="Display Name"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 MaxLength="100"
                                 HelperText="Your professional name" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_credentials"
                                 Label="Credentials"
                                 Variant="Variant.Outlined"
                                 MaxLength="200"
                                 HelperText="e.g., DPT, OCS, CSCS"
                                 Placeholder="DPT, OCS" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_licenseNumber"
                                 Label="License Number"
                                 Variant="Variant.Outlined"
                                 MaxLength="100"
                                 HelperText="Professional license number" />
                </MudItem>
            </MudGrid>
        </ProfileCard>

        <!-- Clinic Information -->
        <ProfileCard Title="Clinic Details"
                    Icon="@Icons.Material.Filled.Business">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_clinicName"
                                 Label="Clinic Name"
                                 Variant="Variant.Outlined"
                                 MaxLength="200"
                                 HelperText="Your practice or clinic name" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_location"
                                 Label="Location"
                                 Variant="Variant.Outlined"
                                 MaxLength="200"
                                 HelperText="City, State, Country"
                                 Placeholder="Austin, TX, USA" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_phone"
                                 Label="Phone Number"
                                 Variant="Variant.Outlined"
                                 HelperText="Contact phone number"
                                 Placeholder="+1-555-123-4567" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_website"
                                 Label="Website"
                                 Variant="Variant.Outlined"
                                 HelperText="Clinic website URL"
                                 Placeholder="https://example.com" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="_bio"
                                 Label="Bio"
                                 Variant="Variant.Outlined"
                                 Lines="4"
                                 MaxLength="1000"
                                 HelperText="Brief description of your background and specialties" />
                </MudItem>
            </MudGrid>
        </ProfileCard>

        <!-- Specialties -->
        <ProfileCard Title="Specialties"
                    Icon="@Icons.Material.Filled.Psychology"
                    CssClass="specialties-card">
            <div class="specialties-container">
                @if (_specialties.Any())
                {
                    <div class="specialties-list">
                        @foreach (var specialty in _specialties)
                        {
                            <MudChip T="string"
                                    Text="@specialty"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    Size="Size.Medium"
                                    OnClose="() => RemoveSpecialty(specialty)"
                                    CloseIcon="@Icons.Material.Filled.Close">
                                @specialty
                            </MudChip>
                        }
                    </div>
                }

                <div class="add-specialty">
                    <MudTextField @bind-Value="_newSpecialty"
                                 Label="Add Specialty"
                                 Variant="Variant.Outlined"
                                 @onkeypress="OnSpecialtyKeyPress"
                                 HelperText="Press Enter to add"
                                 Class="specialty-input" />
                    <MudButton Variant="Variant.Outlined"
                              Color="Color.Primary"
                              OnClick="AddSpecialty"
                              StartIcon="@Icons.Material.Filled.Add"
                              Disabled="@(string.IsNullOrWhiteSpace(_newSpecialty))"
                              Class="add-button">
                        Add
                    </MudButton>
                </div>
            </div>
        </ProfileCard>

        <!-- Default Settings -->
        <ProfileCard Title="Default Settings"
                    Icon="@Icons.Material.Filled.Settings">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTimePicker @bind-Time="_defaultReminderTime"
                                  Label="Default Reminder Time"
                                  Variant="Variant.Outlined"
                                  HelperText="Default time for client reminders"
                                  AmPm="true" />
                </MudItem>
            </MudGrid>
        </ProfileCard>

        <!-- Clinic Logo -->
        <ProfileCard Title="Clinic Logo"
                    Icon="@Icons.Material.Filled.Image">
            <ImageUpload UploadType="logo"
                       CurrentImageUrl="@_logoUrl"
                       OnImageUploaded="OnLogoUploaded"
                       OnImageRemoved="OnLogoRemoved" />
        </ProfileCard>

        <!-- Save Actions -->
        <ProfileCard Title="Save Changes"
                    Icon="@Icons.Material.Filled.Save"
                    CssClass="save-actions-card">
            <div class="save-actions-content">
                <div class="save-status">
                    @if (_hasUnsavedChanges)
                    {
                        <div class="status-indicator warning">
                            <MudIcon Icon="@Icons.Material.Filled.Circle"
                                    Color="Color.Warning"
                                    Size="Size.Small" />
                            <span>You have unsaved changes</span>
                        </div>
                    }
                    else if (_lastSaved.HasValue)
                    {
                        <div class="status-indicator success">
                            <MudIcon Icon="@Icons.Material.Filled.Check"
                                    Color="Color.Success"
                                    Size="Size.Small" />
                            <span>Saved at @_lastSaved.Value.ToString("HH:mm")</span>
                        </div>
                    }
                    else
                    {
                        <div class="status-indicator neutral">
                            <MudIcon Icon="@Icons.Material.Filled.Info"
                                    Color="Color.Default"
                                    Size="Size.Small" />
                            <span>Make changes to enable saving</span>
                        </div>
                    }
                </div>

                <div class="action-buttons">
                    <MudButton Color="Color.Default"
                              OnClick="ResetForm"
                              Disabled="@(!_hasUnsavedChanges)"
                              StartIcon="@Icons.Material.Filled.Refresh"
                              Class="reset-button">
                        Reset
                    </MudButton>

                    <MudButton Color="Color.Primary"
                              OnClick="SaveProfile"
                              Disabled="@(!_hasUnsavedChanges || _isSaving)"
                              StartIcon="@(_isSaving ? null : Icons.Material.Filled.Save)"
                              Class="save-button">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Save Changes</span>
                        }
                    </MudButton>
                </div>
            </div>
        </ProfileCard>
    </div>
</div>


@code {
    private string? _displayName = "Dr. Sarah Johnson";
    private string? _credentials = "DPT, OCS";
    private string? _licenseNumber = "";
    private string? _clinicName = "Healing Hands Physical Therapy";
    private string? _location = "Austin, TX";
    private string? _phone = "+1-555-123-4567";
    private string? _website = "";
    private string? _bio = "";
    private TimeSpan? _defaultReminderTime = new TimeSpan(19, 0, 0);
    private string? _logoUrl;

    private List<string> _specialties = new() { "Knee Rehabilitation", "Shoulder Injuries", "Sports Medicine" };
    private string? _newSpecialty = "";

    private bool _hasUnsavedChanges = false;
    private bool _isSaving = false;
    private DateTime? _lastSaved;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        // TODO: Load actual profile data from API
        // For now, using placeholder data above
        _hasUnsavedChanges = false;
    }

    private async Task SaveProfile()
    {
        _isSaving = true;
        StateHasChanged();

        try
        {
            // TODO: Save to API
            await Task.Delay(1000); // Simulate API call

            _hasUnsavedChanges = false;
            _lastSaved = DateTime.Now;

            Snackbar.Add("Profile updated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save profile: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ResetForm()
    {
        await LoadProfile();
        StateHasChanged();
    }

    private void AddSpecialty()
    {
        if (!string.IsNullOrWhiteSpace(_newSpecialty) && !_specialties.Contains(_newSpecialty.Trim()))
        {
            _specialties.Add(_newSpecialty.Trim());
            _newSpecialty = "";
            _hasUnsavedChanges = true;
            StateHasChanged();
        }
    }

    private void RemoveSpecialty(string specialty)
    {
        _specialties.Remove(specialty);
        _hasUnsavedChanges = true;
        StateHasChanged();
    }

    private async Task OnSpecialtyKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddSpecialty();
        }
    }

    private async Task OnLogoUploaded(string imageUrl)
    {
        _logoUrl = imageUrl;
        _hasUnsavedChanges = true;
        StateHasChanged();
    }

    private async Task OnLogoRemoved()
    {
        _logoUrl = null;
        _hasUnsavedChanges = true;
        StateHasChanged();
    }
}
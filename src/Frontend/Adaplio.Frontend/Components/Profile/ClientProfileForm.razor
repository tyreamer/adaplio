@using Adaplio.Frontend.Services
@using Adaplio.Frontend.Models
@using Adaplio.Frontend.Validators
@using Adaplio.Frontend.Components.Profile
@inject ISnackbar Snackbar
@inject ProfileService ProfileService

<div class="settings-content">
    <div class="settings-header">
        <h2>Personal Information</h2>
        <p>Update your personal details and preferences.</p>
    </div>

    <MudForm @ref="form" Model="@_model" Validation="@_validator">
        <div class="settings-grid">
            <!-- Basic Information -->
            <ProfileCard Title="Basic Information"
                        Icon="@Icons.Material.Filled.Person">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_model.DisplayName"
                                     Label="Display Name"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     MaxLength="60"
                                     HelperText="How others will see your name"
                                     Validation="@_validator.Validation(m => m.DisplayName)" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudSelect @bind-Value="_model.Timezone"
                                  Label="Timezone"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  HelperText="Used for scheduling and reminders">
                            @foreach (var tz in GetTimezones())
                            {
                                <MudSelectItem Value="@tz.Value">@tz.Text</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </ProfileCard>

            <!-- Health Information -->
            <ProfileCard Title="Health Information"
                        Icon="@Icons.Material.Filled.HealthAndSafety">
                <MudGrid>
                    <MudItem xs="12" md="8">
                        <MudTextField @bind-Value="_model.Injury"
                                     Label="Current Injury/Condition"
                                     Variant="Variant.Outlined"
                                     MaxLength="200"
                                     HelperText="Brief description of your condition"
                                     Validation="@_validator.Validation(m => m.Injury)" />
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudSelect @bind-Value="_model.AffectedSide"
                                  Label="Affected Side"
                                  Variant="Variant.Outlined"
                                  HelperText="Which side is affected">
                            <MudSelectItem Value="@("Left")">Left</MudSelectItem>
                            <MudSelectItem Value="@("Right")">Right</MudSelectItem>
                            <MudSelectItem Value="@("Both")">Both</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </ProfileCard>

            <!-- Emergency Contact -->
            <ProfileCard Title="Emergency Contact"
                        Icon="@Icons.Material.Filled.ContactPhone"
                        Badge="Optional"
                        BadgeVariant="neutral">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_model.EmergencyContactName"
                                     Label="Contact Name"
                                     Variant="Variant.Outlined"
                                     MaxLength="100"
                                     HelperText="Name of emergency contact"
                                     Validation="@_validator.Validation(m => m.EmergencyContactName)" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_model.EmergencyContactPhone"
                                     Label="Phone Number"
                                     Variant="Variant.Outlined"
                                     HelperText="E.164 format (e.g., +1234567890)"
                                     Validation="@_validator.Validation(m => m.EmergencyContactPhone)" />
                    </MudItem>
                </MudGrid>
            </ProfileCard>

            <!-- Accessibility -->
            <ProfileCard Title="Accessibility"
                        Icon="@Icons.Material.Filled.Accessibility">
                <div class="accessibility-settings">
                    <MudSwitch @bind-Value="_model.LargeTextMode"
                              Label="Large Text Mode"
                              Color="Color.Primary"
                              ThumbIcon="@Icons.Material.Filled.TextIncrease" />
                    <p class="setting-description">Enable larger text throughout the app for better readability</p>
                </div>
            </ProfileCard>

            <!-- Profile Picture -->
            <ProfileCard Title="Profile Picture"
                        Icon="@Icons.Material.Filled.Photo">
                <ImageUpload UploadType="avatar"
                           CurrentImageUrl="@_model.AvatarUrl"
                           OnImageUploaded="OnAvatarUploaded"
                           OnImageRemoved="OnAvatarRemoved" />
            </ProfileCard>

        </div>

        <!-- Save Actions -->
        <ProfileCard Title="Save Changes"
                    Icon="@Icons.Material.Filled.Save"
                    CssClass="save-actions-card">
            <div class="save-actions-content">
                <div class="save-status">
                    @if (_hasUnsavedChanges)
                    {
                        <div class="status-indicator warning">
                            <MudIcon Icon="@Icons.Material.Filled.Circle"
                                    Color="Color.Warning"
                                    Size="Size.Small" />
                            <span>You have unsaved changes</span>
                        </div>
                    }
                    else if (_lastSaved.HasValue)
                    {
                        <div class="status-indicator success">
                            <MudIcon Icon="@Icons.Material.Filled.Check"
                                    Color="Color.Success"
                                    Size="Size.Small" />
                            <span>Saved at @_lastSaved.Value.ToString("HH:mm")</span>
                        </div>
                    }
                    else
                    {
                        <div class="status-indicator neutral">
                            <MudIcon Icon="@Icons.Material.Filled.Info"
                                    Color="Color.Default"
                                    Size="Size.Small" />
                            <span>Make changes to enable saving</span>
                        </div>
                    }
                </div>

                <div class="action-buttons">
                    <MudButton Color="Color.Default"
                              OnClick="ResetForm"
                              Disabled="@(!_hasUnsavedChanges)"
                              StartIcon="@Icons.Material.Filled.Refresh"
                              Class="reset-button">
                        Reset
                    </MudButton>

                    <MudButton Color="Color.Primary"
                              OnClick="SaveProfile"
                              Disabled="@(!_hasUnsavedChanges || _isSaving)"
                              StartIcon="@(_isSaving ? null : Icons.Material.Filled.Save)"
                              Class="save-button">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Save Changes</span>
                        }
                    </MudButton>
                </div>
            </div>
        </ProfileCard>
    </MudForm>
</div>

<style>
.settings-content {
    width: 100%;
}

.settings-header {
    margin-bottom: var(--space-xl);
}

.settings-header h2 {
    font-family: var(--font-family-display);
    font-size: var(--font-size-xxl);
    font-weight: var(--font-weight-bold);
    color: var(--color-neutral-900);
    margin: 0 0 var(--space-sm) 0;
}

.settings-header p {
    font-size: var(--font-size-base);
    color: var(--color-neutral-600);
    margin: 0;
}

.settings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: var(--space-xl);
}

.accessibility-settings {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
}

.setting-description {
    font-size: var(--font-size-sm);
    color: var(--color-neutral-600);
    margin: 0;
    line-height: 1.4;
}

.save-actions-card {
    grid-column: 1 / -1;
}

.save-actions-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--space-lg);
}

.save-status .status-indicator {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    font-size: var(--font-size-sm);
}

.status-indicator.warning span {
    color: var(--color-primary);
}

.status-indicator.success span {
    color: var(--color-accent-teal);
}

.status-indicator.neutral span {
    color: var(--color-neutral-600);
}

.action-buttons {
    display: flex;
    gap: var(--space-md);
}

.reset-button,
.save-button {
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-md);
    font-weight: var(--font-weight-medium);
}

.save-button {
    background: var(--color-primary);
    color: white;
}

.save-button:hover:not(:disabled) {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .settings-grid {
        grid-template-columns: 1fr;
        gap: var(--space-lg);
    }

    .save-actions-content {
        flex-direction: column;
        gap: var(--space-md);
        align-items: stretch;
    }

    .action-buttons {
        justify-content: center;
    }
}
</style>

@code {
    private MudForm? form;
    private ClientProfileModel _model = new();
    private ClientProfileValidator _validator = new();
    private bool _hasUnsavedChanges = false;
    private bool _isSaving = false;
    private DateTime? _lastSaved;
    private ClientProfileModel _originalModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();

        // Watch for changes
        _model.PropertyChanged += (s, e) => {
            _hasUnsavedChanges = !_model.Equals(_originalModel);
            StateHasChanged();
        };
    }

    private async Task LoadProfile()
    {
        try
        {
            var profile = await ProfileService.GetProfileAsync();

            if (profile != null)
            {
                _model = new ClientProfileModel
                {
                    DisplayName = profile.DisplayName ?? "",
                    Timezone = profile.Timezone ?? "America/New_York",
                    Injury = profile.ClientProfile?.Injury ?? "",
                    AffectedSide = profile.ClientProfile?.AffectedSide ?? "",
                    EmergencyContactName = profile.ClientProfile?.EmergencyContactName ?? "",
                    EmergencyContactPhone = profile.ClientProfile?.EmergencyContactPhone ?? "",
                    LargeTextMode = profile.ClientProfile?.LargeText ?? false,
                    AvatarUrl = profile.AvatarUrl
                };
            }
            else
            {
                // Default values for new profile
                _model = new ClientProfileModel
                {
                    DisplayName = "",
                    Timezone = "America/New_York",
                    Injury = "",
                    AffectedSide = "",
                    EmergencyContactName = "",
                    EmergencyContactPhone = "",
                    LargeTextMode = false,
                    AvatarUrl = null
                };
            }

            _originalModel = _model.Clone();
            _hasUnsavedChanges = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load profile: {ex.Message}", Severity.Error);

            // Fallback to default model
            _model = new ClientProfileModel();
            _originalModel = _model.Clone();
            _hasUnsavedChanges = false;
        }
    }

    private async Task SaveProfile()
    {
        if (form == null) return;

        await form.Validate();
        if (!form.IsValid) return;

        _isSaving = true;
        StateHasChanged();

        try
        {
            var request = new UpdateProfileRequest
            {
                DisplayName = _model.DisplayName,
                Timezone = _model.Timezone,
                AvatarUrl = _model.AvatarUrl,
                ClientProfile = new ClientProfileData
                {
                    Injury = _model.Injury,
                    AffectedSide = _model.AffectedSide,
                    EmergencyContactName = _model.EmergencyContactName,
                    EmergencyContactPhone = _model.EmergencyContactPhone,
                    LargeText = _model.LargeTextMode,
                    HighContrast = _model.HighContrastMode,
                    ReducedMotion = _model.ReducedMotionMode
                }
            };

            await ProfileService.UpdateProfileAsync(request);

            _originalModel = _model.Clone();
            _hasUnsavedChanges = false;
            _lastSaved = DateTime.Now;

            Snackbar.Add("Profile updated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save profile: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ResetForm()
    {
        _model = _originalModel.Clone();
        _hasUnsavedChanges = false;
        await form!.ResetAsync();
        StateHasChanged();
    }

    private async Task OnAvatarUploaded(string imageUrl)
    {
        _model.AvatarUrl = imageUrl;
        _hasUnsavedChanges = true;
        StateHasChanged();
    }

    private async Task OnAvatarRemoved()
    {
        _model.AvatarUrl = null;
        _hasUnsavedChanges = true;
        StateHasChanged();
    }

    private List<(string Value, string Text)> GetTimezones()
    {
        return new List<(string, string)>
        {
            ("UTC", "UTC"),
            ("America/New_York", "Eastern Time (US & Canada)"),
            ("America/Chicago", "Central Time (US & Canada)"),
            ("America/Denver", "Mountain Time (US & Canada)"),
            ("America/Los_Angeles", "Pacific Time (US & Canada)"),
            ("Europe/London", "London"),
            ("Europe/Paris", "Paris"),
            ("Europe/Berlin", "Berlin"),
            ("Asia/Tokyo", "Tokyo"),
            ("Australia/Sydney", "Sydney")
        };
    }
}
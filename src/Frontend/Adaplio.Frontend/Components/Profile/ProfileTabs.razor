@using Adaplio.Frontend.Services
@using Adaplio.Frontend.Components.Common
@inject AuthStateService AuthState
@inject AuthorizationService Authorization
@inject ISnackbar Snackbar

<div class="modern-profile-tabs">
    <!-- Modern Tab Navigation -->
    <div class="tab-navigation">
        <div class="tab-nav-container">
            <button class="tab-button @(_activeTab == 0 ? "active" : "")" @onclick="@(() => SetActiveTab(0))">
                <MudIcon Icon="@Icons.Material.Filled.Dashboard" Size="Size.Small" />
                <span class="tab-text">Overview</span>
            </button>
            <button class="tab-button @(_activeTab == 1 ? "active" : "")" @onclick="@(() => SetActiveTab(1))">
                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Small" />
                <span class="tab-text">Plans</span>
            </button>
            <button class="tab-button @(_activeTab == 2 ? "active" : "")" @onclick="@(() => SetActiveTab(2))">
                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" />
                <span class="tab-text">Progress</span>
            </button>
            <button class="tab-button @(_activeTab == 3 ? "active" : "")" @onclick="@(() => SetActiveTab(3))">
                <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Small" />
                <span class="tab-text">Settings</span>
            </button>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content-area">
        <!-- Overview Tab -->
        @if (_activeTab == 0)
        {
            <div class="tab-panel">
                <OverviewTabContent />
            </div>
        }

        <!-- Plans Tab -->
        @if (_activeTab == 1)
        {
            <div class="tab-panel">
                <PlansTabContent />
            </div>
        }

        <!-- Progress Tab -->
        @if (_activeTab == 2)
        {
            <div class="tab-panel">
                <ProgressTabContent />
            </div>
        }

        <!-- Settings Tab -->
        @if (_activeTab == 3)
        {
            <div class="tab-panel">
                @if (AuthState.IsClient)
                {
                    <ClientProfileForm />
                }
                else if (AuthState.IsTrainer)
                {
                    <TrainerProfileForm />
                }
                else
                {
                    <MudAlert Severity="Severity.Error">
                        You don't have permission to edit your profile.
                    </MudAlert>
                }
            </div>
        }
    </div>
</div>

<style>
.modern-profile-tabs {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--elevation-2);
}

.tab-navigation {
    background: var(--color-neutral-100);
    padding: var(--space-xs);
    border-bottom: 1px solid var(--color-neutral-200);
}

.tab-nav-container {
    display: flex;
    gap: var(--space-xs);
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
}

.tab-button {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-md) var(--space-lg);
    border: none;
    background: transparent;
    border-radius: var(--radius-md);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-neutral-600);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-standard);
    position: relative;
}

.tab-button:hover {
    color: var(--color-neutral-900);
    background: rgba(255, 255, 255, 0.5);
}

.tab-button.active {
    background: var(--color-surface);
    color: var(--color-primary);
    box-shadow: var(--elevation-1);
    border: 1px solid var(--color-neutral-200);
}

.tab-button.active .mud-icon-root {
    color: var(--color-primary);
}

.tab-text {
    white-space: nowrap;
}

.tab-content-area {
    padding: var(--space-xl);
    min-height: 400px;
}

.tab-panel {
    animation: tabSlideIn var(--duration-base) var(--easing-standard);
}

@keyframes tabSlideIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
    .tab-nav-container {
        overflow-x: auto;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

    .tab-nav-container::-webkit-scrollbar {
        display: none;
    }

    .tab-button {
        flex-shrink: 0;
        min-width: 120px;
        padding: var(--space-md);
    }

    .tab-content-area {
        padding: var(--space-lg);
    }
}

@media (max-width: 480px) {
    .tab-button .tab-text {
        display: none;
    }

    .tab-button {
        min-width: 60px;
        padding: var(--space-md) var(--space-sm);
    }
}
</style>

@code {
    private int _activeTab = 0;

    private void SetActiveTab(int tabIndex)
    {
        _activeTab = tabIndex;
    }
}
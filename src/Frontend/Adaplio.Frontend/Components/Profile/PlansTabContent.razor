@using Adaplio.Frontend.Services
@inject AuthStateService AuthState

<div class="plans-content">
    @if (!Plans.Any())
    {
        <div class="empty-plans">
            <div class="empty-state-icon">
                <MudIcon Icon="@Icons.Material.Outlined.Assignment" Size="Size.Large" />
            </div>
            <h3 class="empty-state-title">No Plans Assigned</h3>
            <p class="empty-state-description">
                @if (AuthState.IsClient)
                {
                    <text>Your trainer hasn't assigned a plan yet. Once they do, it will appear here.</text>
                }
                else
                {
                    <text>You haven't created any training plans yet. Start by creating your first plan.</text>
                }
            </p>
            @if (AuthState.IsTrainer)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                    Create Plan
                </MudButton>
            }
        </div>
    }
    else
    {
        <div class="plans-header">
            <div class="plans-title">
                <h2>@(AuthState.IsClient ? "Your Plans" : "Training Plans")</h2>
                <p>@($"{Plans.Count} plan{(Plans.Count == 1 ? "" : "s")} â€¢ {Plans.Count(p => p.Status == "Active")} active")</p>
            </div>
            @if (AuthState.IsTrainer)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                    New Plan
                </MudButton>
            }
        </div>

        <div class="plans-grid">
            @foreach (var plan in Plans)
            {
                <div class="plan-card @GetPlanStatusClass(plan.Status)" @onclick="@(() => OpenPlan(plan))">
                    <div class="plan-header">
                        <div class="plan-status-badge @plan.Status.ToLower()">
                            <MudIcon Icon="@GetStatusIcon(plan.Status)" Size="Size.Small" />
                            @plan.Status
                        </div>
                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
                                       Size="Size.Small"
                                       Class="plan-menu"
                                       @onclick:stopPropagation="true" />
                    </div>

                    <div class="plan-content">
                        <h3 class="plan-title">@plan.Name</h3>
                        <p class="plan-description">@plan.Description</p>

                        <div class="plan-dates">
                            <div class="date-item">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                @plan.StartDate.ToString("MMM dd") - @plan.EndDate.ToString("MMM dd, yyyy")
                            </div>
                            <div class="duration-item">
                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" />
                                @GetPlanDuration(plan) weeks
                            </div>
                        </div>

                        <div class="plan-progress">
                            <div class="progress-header">
                                <span class="progress-label">Progress</span>
                                <span class="progress-percentage">@plan.CompletionPercentage%</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: @(plan.CompletionPercentage)%"></div>
                            </div>
                        </div>

                        @if (plan.Status == "Active")
                        {
                            <div class="plan-stats">
                                <div class="stat-item">
                                    <span class="stat-value">@plan.CompletedExercises</span>
                                    <span class="stat-label">Completed</span>
                                </div>
                                <div class="stat-divider"></div>
                                <div class="stat-item">
                                    <span class="stat-value">@plan.TotalExercises</span>
                                    <span class="stat-label">Total</span>
                                </div>
                                <div class="stat-divider"></div>
                                <div class="stat-item">
                                    <span class="stat-value">@GetDaysRemaining(plan)</span>
                                    <span class="stat-label">Days left</span>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="plan-footer">
                        @if (plan.Status == "Active")
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary" FullWidth="true">
                                Continue Plan
                            </MudButton>
                        }
                        else if (plan.Status == "Completed")
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Default" FullWidth="true">
                                View Results
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Default" FullWidth="true">
                                View Details
                            </MudButton>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
.plans-content {
    width: 100%;
}

/* Empty State */
.empty-plans {
    text-align: center;
    padding: var(--space-xxxxl) var(--space-xl);
}

.empty-state-icon {
    color: var(--color-neutral-400);
    margin-bottom: var(--space-xl);
}

.empty-state-title {
    font-family: var(--font-family-display);
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    color: var(--color-neutral-700);
    margin: 0 0 var(--space-md) 0;
}

.empty-state-description {
    font-size: var(--font-size-base);
    color: var(--color-neutral-500);
    margin: 0 0 var(--space-xl) 0;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.5;
}

/* Plans Header */
.plans-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-xl);
}

.plans-title h2 {
    font-family: var(--font-family-display);
    font-size: var(--font-size-xxl);
    font-weight: var(--font-weight-bold);
    color: var(--color-neutral-900);
    margin: 0 0 var(--space-sm) 0;
}

.plans-title p {
    font-size: var(--font-size-sm);
    color: var(--color-neutral-600);
    margin: 0;
}

/* Plans Grid */
.plans-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: var(--space-xl);
}

.plan-card {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    border: 2px solid var(--color-neutral-200);
    padding: var(--space-xl);
    cursor: pointer;
    transition: all var(--duration-base) var(--easing-standard);
    position: relative;
    overflow: hidden;
}

.plan-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--elevation-4);
    border-color: var(--color-primary);
}

.plan-card.active {
    border-color: var(--color-accent-teal);
    background: linear-gradient(135deg, var(--color-surface) 0%, rgba(0, 191, 165, 0.02) 100%);
}

.plan-card.completed {
    border-color: var(--color-neutral-300);
    background: var(--color-neutral-50);
}

.plan-card.pending {
    border-color: var(--color-primary);
    background: linear-gradient(135deg, var(--color-surface) 0%, rgba(255, 122, 0, 0.02) 100%);
}

/* Plan Header */
.plan-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-lg);
}

.plan-status-badge {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-md);
    border-radius: var(--radius-round);
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-semibold);
    text-transform: uppercase;
}

.plan-status-badge.active {
    background: var(--color-accent-teal-light);
    color: var(--color-accent-teal);
}

.plan-status-badge.completed {
    background: var(--color-neutral-200);
    color: var(--color-neutral-600);
}

.plan-status-badge.pending {
    background: var(--color-primary-light);
    color: var(--color-primary);
}

.plan-menu {
    color: var(--color-neutral-500);
}

/* Plan Content */
.plan-title {
    font-family: var(--font-family-display);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--color-neutral-900);
    margin: 0 0 var(--space-sm) 0;
    line-height: 1.3;
}

.plan-description {
    font-size: var(--font-size-sm);
    color: var(--color-neutral-600);
    margin: 0 0 var(--space-lg) 0;
    line-height: 1.4;
}

.plan-dates {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
    margin-bottom: var(--space-lg);
}

.date-item,
.duration-item {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    font-size: var(--font-size-sm);
    color: var(--color-neutral-600);
}

/* Progress Bar */
.plan-progress {
    margin-bottom: var(--space-lg);
}

.progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-sm);
}

.progress-label {
    font-size: var(--font-size-sm);
    color: var(--color-neutral-600);
    font-weight: var(--font-weight-medium);
}

.progress-percentage {
    font-size: var(--font-size-sm);
    color: var(--color-neutral-900);
    font-weight: var(--font-weight-semibold);
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: var(--color-neutral-200);
    border-radius: var(--radius-round);
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--color-accent-teal) 0%, var(--color-primary) 100%);
    transition: width var(--duration-gentle) var(--easing-standard);
}

/* Plan Stats */
.plan-stats {
    display: flex;
    align-items: center;
    gap: var(--space-lg);
    margin-bottom: var(--space-lg);
}

.stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
}

.stat-value {
    font-family: var(--font-family-display);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-bold);
    color: var(--color-neutral-900);
    line-height: 1;
}

.stat-label {
    font-size: var(--font-size-xs);
    color: var(--color-neutral-500);
    margin-top: var(--space-xs);
}

.stat-divider {
    width: 1px;
    height: 30px;
    background: var(--color-neutral-200);
}

/* Plan Footer */
.plan-footer {
    border-top: 1px solid var(--color-neutral-200);
    padding-top: var(--space-lg);
    margin-top: var(--space-lg);
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .plans-header {
        flex-direction: column;
        gap: var(--space-lg);
        align-items: stretch;
    }

    .plans-grid {
        grid-template-columns: 1fr;
        gap: var(--space-lg);
    }

    .plan-stats {
        gap: var(--space-md);
    }
}
</style>

@code {
    private List<PlanItem> Plans = new()
    {
        new()
        {
            Id = 1,
            Name = "Hip Flexor Recovery Protocol",
            Description = "Comprehensive 6-week program focusing on hip flexor mobility and strength.",
            Status = "Active",
            StartDate = DateTime.Now.AddDays(-14),
            EndDate = DateTime.Now.AddDays(28),
            CompletionPercentage = 65,
            CompletedExercises = 18,
            TotalExercises = 28
        },
        new()
        {
            Id = 2,
            Name = "Core Strengthening Phase 1",
            Description = "Foundation exercises to build core stability and prevent future injuries.",
            Status = "Completed",
            StartDate = DateTime.Now.AddDays(-56),
            EndDate = DateTime.Now.AddDays(-14),
            CompletionPercentage = 100,
            CompletedExercises = 24,
            TotalExercises = 24
        },
        new()
        {
            Id = 3,
            Name = "Advanced Mobility Protocol",
            Description = "Next phase focusing on dynamic movement patterns and functional strength.",
            Status = "Pending",
            StartDate = DateTime.Now.AddDays(30),
            EndDate = DateTime.Now.AddDays(72),
            CompletionPercentage = 0,
            CompletedExercises = 0,
            TotalExercises = 32
        }
    };

    private string GetPlanStatusClass(string status)
    {
        return status.ToLower();
    }

    private string GetStatusIcon(string status)
    {
        return status switch
        {
            "Active" => Icons.Material.Filled.PlayArrow,
            "Completed" => Icons.Material.Filled.CheckCircle,
            "Pending" => Icons.Material.Filled.Schedule,
            _ => Icons.Material.Filled.Circle
        };
    }

    private int GetPlanDuration(PlanItem plan)
    {
        return (int)Math.Ceiling((plan.EndDate - plan.StartDate).TotalDays / 7.0);
    }

    private int GetDaysRemaining(PlanItem plan)
    {
        return Math.Max(0, (int)(plan.EndDate - DateTime.Now).TotalDays);
    }

    private void OpenPlan(PlanItem plan)
    {
        // Handle plan opening
    }

    public class PlanItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int CompletionPercentage { get; set; }
        public int CompletedExercises { get; set; }
        public int TotalExercises { get; set; }
    }
}
@using Adaplio.Frontend.Services
@inject AuthStateService AuthState
@inject IJSRuntime JSRuntime

<div class="profile-hero">
    <div class="hero-background">
        <div class="hero-gradient"></div>
        <div class="hero-content">
            <div class="hero-main">
                <!-- Avatar with Progress Ring -->
                <div class="avatar-section">
                    <div class="progress-ring">
                        <svg class="progress-svg" viewBox="0 0 120 120">
                            <circle
                                cx="60"
                                cy="60"
                                r="54"
                                fill="none"
                                stroke="rgba(255, 255, 255, 0.2)"
                                stroke-width="4"/>
                            <circle
                                cx="60"
                                cy="60"
                                r="54"
                                fill="none"
                                stroke="var(--color-accent-teal)"
                                stroke-width="4"
                                stroke-linecap="round"
                                stroke-dasharray="@(GetProgressCircumference())"
                                stroke-dashoffset="@(GetProgressOffset())"
                                transform="rotate(-90 60 60)"/>
                        </svg>

                        <div class="avatar-container">
                            @if (!string.IsNullOrEmpty(AvatarUrl))
                            {
                                <img src="@AvatarUrl" alt="Profile" class="hero-avatar" />
                            }
                            else
                            {
                                <div class="hero-avatar hero-avatar-placeholder">
                                    <span class="avatar-initials">@GetInitials()</span>
                                </div>
                            }

                            <button class="avatar-upload-btn" @onclick="OnAvatarClick" aria-label="Change photo">
                                <MudIcon Icon="@Icons.Material.Filled.CameraAlt" Size="Size.Small" />
                            </button>
                        </div>
                    </div>

                    <div class="progress-stats">
                        <div class="progress-value">@(CompletionPercentage)%</div>
                        <div class="progress-label">@GetProgressLabel()</div>
                    </div>
                </div>

                <!-- Profile Info -->
                <div class="profile-info">
                    <div class="name-section">
                        <h1 class="profile-name">@(DisplayName ?? "Set your name")</h1>
                        <div class="role-badge @(AuthState.IsClient ? "role-client" : "role-trainer")">
                            <MudIcon Icon="@GetRoleIcon()" Size="Size.Small" />
                            @(AuthState.IsClient ? "CLIENT" : "TRAINER")
                        </div>
                    </div>

                    <div class="profile-meta">
                        @if (!string.IsNullOrEmpty(Location))
                        {
                            <div class="meta-item">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                @Location
                            </div>
                        }
                        <div class="meta-item">
                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                            Joined @(JoinDate.ToString("MMMM yyyy"))
                        </div>
                    </div>
                </div>
            </div>

            <!-- Primary CTA -->
            <div class="hero-actions">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           StartIcon="@GetCtaIcon()"
                           OnClick="OnPrimaryAction"
                           Class="primary-cta">
                    @GetCtaText()
                </MudButton>
            </div>
        </div>
    </div>
</div>

<style>
.profile-hero {
    width: 100%;
    border-radius: var(--radius-xl);
    overflow: hidden;
    margin-bottom: var(--space-xl);
}

.hero-background {
    background: linear-gradient(135deg, var(--color-neutral-900) 0%, var(--color-neutral-800) 50%, var(--color-accent-teal) 100%);
    position: relative;
    padding: var(--space-xxxxl) var(--space-xl);
}

.hero-gradient {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, rgba(255, 122, 0, 0.1) 0%, rgba(0, 191, 165, 0.1) 100%);
    pointer-events: none;
}

.hero-content {
    position: relative;
    z-index: 1;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-xl);
}

.hero-main {
    display: flex;
    align-items: center;
    gap: var(--space-xl);
}

.avatar-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
}

.progress-ring {
    position: relative;
    width: 120px;
    height: 120px;
}

.progress-svg {
    width: 100%;
    height: 100%;
    transform: rotate(-90deg);
}

.avatar-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 96px;
    height: 96px;
}

.hero-avatar {
    width: 96px;
    height: 96px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid rgba(255, 255, 255, 0.2);
}

.hero-avatar-placeholder {
    background: var(--color-primary);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
}

.avatar-initials {
    font-family: var(--font-family-display);
    font-size: var(--font-size-xxl);
    font-weight: var(--font-weight-bold);
}

.avatar-upload-btn {
    position: absolute;
    bottom: -4px;
    right: -4px;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: var(--color-primary);
    color: white;
    border: 2px solid white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--duration-fast) var(--easing-standard);
}

.avatar-upload-btn:hover {
    background: var(--color-primary-hover);
    transform: scale(1.1);
}

.progress-stats {
    text-align: center;
    color: white;
}

.progress-value {
    font-family: var(--font-family-display);
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    line-height: 1;
}

.progress-label {
    font-size: var(--font-size-xs);
    opacity: 0.8;
    margin-top: var(--space-xs);
}

.profile-info {
    flex: 1;
}

.name-section {
    display: flex;
    align-items: center;
    gap: var(--space-md);
    margin-bottom: var(--space-md);
}

.profile-name {
    font-family: var(--font-family-display);
    font-size: var(--font-size-xxxl);
    font-weight: var(--font-weight-bold);
    color: white;
    margin: 0;
}

.role-badge {
    padding: var(--space-xs) var(--space-md);
    border-radius: var(--radius-round);
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-semibold);
    display: flex;
    align-items: center;
    gap: var(--space-xs);
}

.role-client {
    background: rgba(0, 191, 165, 0.2);
    color: var(--color-accent-teal);
    border: 1px solid rgba(0, 191, 165, 0.3);
}

.role-trainer {
    background: rgba(255, 122, 0, 0.2);
    color: var(--color-primary);
    border: 1px solid rgba(255, 122, 0, 0.3);
}

.profile-meta {
    display: flex;
    gap: var(--space-lg);
    color: rgba(255, 255, 255, 0.8);
}

.meta-item {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    font-size: var(--font-size-sm);
}

.hero-actions {
    flex-shrink: 0;
}

.primary-cta {
    padding: var(--space-md) var(--space-xl);
    font-weight: var(--font-weight-semibold);
    border-radius: var(--radius-lg);
    background: var(--color-primary) !important;
}

.primary-cta:hover {
    background: var(--color-primary-hover) !important;
    transform: translateY(-2px);
    box-shadow: var(--elevation-4);
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
    .hero-background {
        padding: var(--space-xl) var(--space-lg);
    }

    .hero-content {
        flex-direction: column;
        text-align: center;
        gap: var(--space-lg);
    }

    .hero-main {
        flex-direction: column;
        gap: var(--space-lg);
    }

    .profile-name {
        font-size: var(--font-size-xxl);
    }

    .name-section {
        flex-direction: column;
        gap: var(--space-sm);
    }

    .profile-meta {
        justify-content: center;
        flex-wrap: wrap;
        gap: var(--space-md);
    }

    .primary-cta {
        width: 100%;
        max-width: 280px;
    }
}

@media (max-width: 480px) {
    .progress-ring {
        width: 100px;
        height: 100px;
    }

    .avatar-container {
        width: 80px;
        height: 80px;
    }

    .hero-avatar {
        width: 80px;
        height: 80px;
    }

    .profile-name {
        font-size: var(--font-size-xl);
    }
}
</style>

@code {
    [Parameter] public string? DisplayName { get; set; }
    [Parameter] public string? AvatarUrl { get; set; }
    [Parameter] public string? Location { get; set; }
    [Parameter] public DateTime JoinDate { get; set; } = DateTime.Now.AddMonths(-6);
    [Parameter] public int CompletionPercentage { get; set; } = 75;
    [Parameter] public EventCallback OnAvatarClick { get; set; }
    [Parameter] public EventCallback OnPrimaryAction { get; set; }

    private string GetInitials()
    {
        if (string.IsNullOrEmpty(DisplayName))
            return AuthState.IsClient ? "CL" : "TR";

        var parts = DisplayName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();

        return parts.Length > 0 ? parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper() : "UN";
    }

    private string GetRoleIcon()
    {
        return AuthState.IsClient ? Icons.Material.Filled.Person : Icons.Material.Filled.Business;
    }

    private string GetCtaIcon()
    {
        return AuthState.IsClient ? Icons.Material.Filled.PersonAdd : Icons.Material.Filled.GroupAdd;
    }

    private string GetCtaText()
    {
        return AuthState.IsClient ? "Add Trainer" : "Invite Client";
    }

    private string GetProgressLabel()
    {
        return AuthState.IsClient ? "Profile Setup" : "Account Setup";
    }

    private string GetProgressCircumference()
    {
        var circumference = 2 * Math.PI * 54; // radius = 54
        return $"{circumference}";
    }

    private string GetProgressOffset()
    {
        var circumference = 2 * Math.PI * 54;
        var offset = circumference - (CompletionPercentage / 100.0 * circumference);
        return $"{offset}";
    }
}
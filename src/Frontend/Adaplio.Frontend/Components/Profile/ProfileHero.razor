@using Adaplio.Frontend.Services
@inject AuthStateService AuthState
@inject IJSRuntime JSRuntime

<div class="profile-hero">
    <div class="hero-background">
        <div class="hero-gradient"></div>
        <div class="hero-content">
            <div class="hero-main">
                <!-- Avatar with Progress Ring -->
                <div class="avatar-section">
                    <div class="progress-ring">
                        <svg class="progress-svg" viewBox="0 0 120 120">
                            <circle
                                cx="60"
                                cy="60"
                                r="54"
                                fill="none"
                                stroke="rgba(255, 255, 255, 0.2)"
                                stroke-width="4"/>
                            <circle
                                cx="60"
                                cy="60"
                                r="54"
                                fill="none"
                                stroke="var(--color-accent-teal)"
                                stroke-width="4"
                                stroke-linecap="round"
                                stroke-dasharray="@(GetProgressCircumference())"
                                stroke-dashoffset="@(GetProgressOffset())"
                                transform="rotate(-90 60 60)"/>
                        </svg>

                        <div class="avatar-container">
                            @if (!string.IsNullOrEmpty(AvatarUrl))
                            {
                                <img src="@AvatarUrl" alt="Profile" class="hero-avatar" />
                            }
                            else
                            {
                                <div class="hero-avatar hero-avatar-placeholder">
                                    <span class="avatar-initials">@GetInitials()</span>
                                </div>
                            }

                            <button class="avatar-upload-btn" @onclick="OnAvatarClick" aria-label="Change photo">
                                <MudIcon Icon="@Icons.Material.Filled.CameraAlt" Size="Size.Small" />
                            </button>
                        </div>
                    </div>

                    <div class="progress-stats">
                        <div class="progress-value">@(CompletionPercentage)%</div>
                        <div class="progress-label">@GetProgressLabel()</div>
                    </div>
                </div>

                <!-- Profile Info -->
                <div class="profile-info">
                    <div class="name-section">
                        <h1 class="profile-name">@(DisplayName ?? "Set your name")</h1>
                        <div class="role-badge @(AuthState.IsClient ? "role-client" : "role-trainer")">
                            <MudIcon Icon="@GetRoleIcon()" Size="Size.Small" />
                            @(AuthState.IsClient ? "CLIENT" : "TRAINER")
                        </div>
                    </div>

                    <div class="profile-meta">
                        @if (!string.IsNullOrEmpty(Location))
                        {
                            <div class="meta-item">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                @Location
                            </div>
                        }
                        <div class="meta-item">
                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                            Joined @(JoinDate.ToString("MMMM yyyy"))
                        </div>
                    </div>
                </div>
            </div>

            <!-- Primary CTA -->
            <div class="hero-actions">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           StartIcon="@GetCtaIcon()"
                           OnClick="OnPrimaryAction"
                           Class="primary-cta">
                    @GetCtaText()
                </MudButton>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? DisplayName { get; set; }
    [Parameter] public string? AvatarUrl { get; set; }
    [Parameter] public string? Location { get; set; }
    [Parameter] public DateTime JoinDate { get; set; } = DateTime.Now.AddMonths(-6);
    [Parameter] public int CompletionPercentage { get; set; } = 75;
    [Parameter] public EventCallback OnAvatarClick { get; set; }
    [Parameter] public EventCallback OnPrimaryAction { get; set; }

    private string GetInitials()
    {
        if (string.IsNullOrEmpty(DisplayName))
            return AuthState.IsClient ? "CL" : "TR";

        var parts = DisplayName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();

        return parts.Length > 0 ? parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper() : "UN";
    }

    private string GetRoleIcon()
    {
        return AuthState.IsClient ? Icons.Material.Filled.Person : Icons.Material.Filled.Business;
    }

    private string GetCtaIcon()
    {
        return AuthState.IsClient ? Icons.Material.Filled.PersonAdd : Icons.Material.Filled.GroupAdd;
    }

    private string GetCtaText()
    {
        return AuthState.IsClient ? "Add Trainer" : "Invite Client";
    }

    private string GetProgressLabel()
    {
        return AuthState.IsClient ? "Profile Setup" : "Account Setup";
    }

    private string GetProgressCircumference()
    {
        var circumference = 2 * Math.PI * 54; // radius = 54
        return $"{circumference}";
    }

    private string GetProgressOffset()
    {
        var circumference = 2 * Math.PI * 54;
        var offset = circumference - (CompletionPercentage / 100.0 * circumference);
        return $"{offset}";
    }
}
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<!-- Overlay -->
<div class="slide-panel-overlay @(IsOpen ? "visible" : "")" @onclick="ClosePanel"></div>

<!-- Panel -->
<div class="slide-panel @(IsOpen ? "open" : "")">
    <div class="slide-panel-header">
        <div class="panel-title">
            <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="mr-2" />
            Notifications
            @if (UnreadCount > 0)
            {
                <MudBadge Content="@UnreadCount" Color="Color.Error" Class="ml-2">
                </MudBadge>
            }
        </div>
        <MudIconButton Icon="@Icons.Material.Filled.Close"
                       Size="Size.Small"
                       OnClick="ClosePanel" />
    </div>

    <div class="slide-panel-content">
        @if (!Notifications.Any())
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <MudIcon Icon="@Icons.Material.Filled.NotificationsNone" Size="Size.Large" />
                </div>
                <div class="empty-state-title">No notifications</div>
                <div class="empty-state-description">
                    You're all caught up! We'll notify you when something important happens.
                </div>
            </div>
        }
        else
        {
            <div class="notification-list">
                @foreach (var notification in Notifications.OrderByDescending(n => n.CreatedAt))
                {
                    <div class="notification-item @(notification.IsRead ? "" : "unread")"
                         @onclick="@(() => MarkAsRead(notification))">
                        <div class="notification-content">
                            <div class="notification-message">@notification.Message</div>
                            <div class="notification-time">@GetRelativeTime(notification.CreatedAt)</div>
                        </div>
                        @if (!notification.IsRead)
                        {
                            <div class="notification-dot"></div>
                        }
                    </div>
                }
            </div>

            @if (Notifications.Any(n => !n.IsRead))
            {
                <div class="panel-actions">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               OnClick="MarkAllAsRead"
                               Class="mark-all-read-btn">
                        Mark all as read
                    </MudButton>
                </div>
            }
        }
    </div>
</div>

<style>
.slide-panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-xl) var(--space-xl) var(--space-lg);
    border-bottom: 1px solid var(--color-neutral-200);
}

.panel-title {
    display: flex;
    align-items: center;
    font-family: var(--font-family-display);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--color-neutral-900);
}

.slide-panel-content {
    padding: var(--space-lg);
    height: calc(100vh - 80px);
    overflow-y: auto;
}

.notification-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
}

.notification-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: var(--space-lg);
    border-radius: var(--radius-md);
    background: var(--color-surface);
    border: 1px solid var(--color-neutral-200);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-standard);
}

.notification-item:hover {
    background: var(--color-neutral-50);
    transform: translateX(-2px);
}

.notification-item.unread {
    border-left: 4px solid var(--color-primary);
    background: var(--color-primary-light);
}

.notification-content {
    flex: 1;
}

.notification-message {
    font-size: var(--font-size-sm);
    color: var(--color-neutral-900);
    line-height: 1.4;
    margin-bottom: var(--space-xs);
}

.notification-time {
    font-size: var(--font-size-xs);
    color: var(--color-neutral-500);
}

.notification-dot {
    width: 8px;
    height: 8px;
    background: var(--color-primary);
    border-radius: 50%;
    margin-top: var(--space-xs);
    flex-shrink: 0;
}

.panel-actions {
    padding-top: var(--space-lg);
    border-top: 1px solid var(--color-neutral-200);
    text-align: center;
}

.mark-all-read-btn {
    width: 100%;
}

.empty-state {
    text-align: center;
    padding: var(--space-xxxxl) var(--space-xl);
}

.empty-state-icon {
    color: var(--color-neutral-400);
    margin-bottom: var(--space-lg);
}

.empty-state-title {
    font-family: var(--font-family-display);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--color-neutral-700);
    margin-bottom: var(--space-sm);
}

.empty-state-description {
    font-size: var(--font-size-sm);
    color: var(--color-neutral-500);
    line-height: 1.4;
}
</style>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public List<Notification> Notifications { get; set; } = new();
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EventCallback<Notification> OnNotificationRead { get; set; }
    [Parameter] public EventCallback OnMarkAllRead { get; set; }

    private int UnreadCount => Notifications.Count(n => !n.IsRead);

    private async Task ClosePanel()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private async Task MarkAsRead(Notification notification)
    {
        if (!notification.IsRead)
        {
            notification.IsRead = true;
            await OnNotificationRead.InvokeAsync(notification);
        }
    }

    private async Task MarkAllAsRead()
    {
        foreach (var notification in Notifications.Where(n => !n.IsRead))
        {
            notification.IsRead = true;
        }
        await OnMarkAllRead.InvokeAsync();
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        return timeSpan.TotalMinutes < 60 ? $"{(int)timeSpan.TotalMinutes}m ago" :
               timeSpan.TotalHours < 24 ? $"{(int)timeSpan.TotalHours}h ago" :
               timeSpan.TotalDays < 7 ? $"{(int)timeSpan.TotalDays}d ago" :
               dateTime.ToString("MMM dd");
    }

    public class Notification
    {
        public string Message { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public bool IsRead { get; set; }
        public string Type { get; set; } = "info";
    }
}
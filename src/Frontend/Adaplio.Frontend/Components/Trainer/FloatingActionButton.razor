@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation

<div class="fab-container">
    <!-- Main FAB -->
    <div class="fab @(IsExpanded ? "fab-expanded" : "")" @onclick="ToggleFab">
        <MudIcon Icon="@(IsExpanded ? Icons.Material.Filled.Close : Icons.Material.Filled.Add)"
                 Size="Size.Medium"
                 Class="@GetFabIconClass()" />
    </div>

    <!-- Expanded Actions -->
    @if (IsExpanded)
    {
        <div class="fab-actions">
            <div class="fab-action" @onclick="NewProposal" title="New Proposal">
                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Small" />
                <span class="fab-action-label">New Proposal</span>
            </div>

            <div class="fab-action" @onclick="UploadVideo" title="Upload Video">
                <MudIcon Icon="@Icons.Material.Filled.VideoLibrary" Size="Size.Small" />
                <span class="fab-action-label">Upload Video</span>
            </div>

            <div class="fab-action" @onclick="SendInvite" title="Send Invite">
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Size="Size.Small" />
                <span class="fab-action-label">Send Invite</span>
            </div>
        </div>
    }

    <!-- Backdrop -->
    @if (IsExpanded)
    {
        <div class="fab-backdrop" @onclick="CloseFab"></div>
    }
</div>

<style>
.fab-container {
    position: fixed;
    bottom: 24px;
    right: 24px;
    z-index: var(--z-fixed);
}

.fab {
    width: 56px;
    height: 56px;
    background: var(--color-primary);
    border: none;
    border-radius: var(--radius-round);
    box-shadow: var(--elevation-4);
    color: var(--color-primary-on);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--duration-base) var(--easing-standard);
    position: relative;
    z-index: 2;
}

.fab:hover {
    background: var(--color-primary-hover);
    transform: scale(1.05);
    box-shadow: var(--elevation-5);
}

.fab:active {
    transform: scale(0.95);
}

.fab-expanded {
    background: var(--color-neutral-700);
}

.fab-icon {
    transition: transform var(--duration-base) var(--easing-standard);
}

.fab-icon-rotated {
    transform: rotate(45deg);
}

.fab-actions {
    position: absolute;
    bottom: 72px;
    right: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
    z-index: 1;
}

.fab-action {
    display: flex;
    align-items: center;
    gap: var(--space-md);
    padding: var(--space-md) var(--space-lg);
    background: var(--color-surface);
    border-radius: var(--radius-round);
    box-shadow: var(--elevation-3);
    cursor: pointer;
    transition: all var(--duration-base) var(--easing-standard);
    white-space: nowrap;
    transform: translateY(10px);
    opacity: 0;
    animation: fabActionSlideIn var(--duration-base) var(--easing-standard) forwards;
}

.fab-action:nth-child(1) { animation-delay: 50ms; }
.fab-action:nth-child(2) { animation-delay: 100ms; }
.fab-action:nth-child(3) { animation-delay: 150ms; }

.fab-action:hover {
    background: var(--color-primary-light);
    transform: translateY(0) translateX(-4px);
    box-shadow: var(--elevation-4);
}

.fab-action-label {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-neutral-900);
}

.fab-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.2);
    z-index: 0;
    animation: fabBackdropFadeIn var(--duration-base) var(--easing-standard);
}

</style>

@code {
    [Parameter] public EventCallback OnNewProposal { get; set; }
    [Parameter] public EventCallback OnUploadVideo { get; set; }
    [Parameter] public EventCallback OnSendInvite { get; set; }

    private bool IsExpanded = false;

    private void ToggleFab()
    {
        IsExpanded = !IsExpanded;
    }

    private void CloseFab()
    {
        IsExpanded = false;
    }

    private string GetFabIconClass()
    {
        return IsExpanded ? "fab-icon fab-icon-rotated" : "fab-icon";
    }

    private async Task NewProposal()
    {
        IsExpanded = false;
        if (OnNewProposal.HasDelegate)
        {
            await OnNewProposal.InvokeAsync();
        }
        else
        {
            Navigation.NavigateTo("/proposals/new");
        }
    }

    private async Task UploadVideo()
    {
        IsExpanded = false;
        if (OnUploadVideo.HasDelegate)
        {
            await OnUploadVideo.InvokeAsync();
        }
        else
        {
            Navigation.NavigateTo("/media/upload");
        }
    }

    private async Task SendInvite()
    {
        IsExpanded = false;
        if (OnSendInvite.HasDelegate)
        {
            await OnSendInvite.InvokeAsync();
        }
        else
        {
            // Default invite action can be implemented here
        }
    }
}
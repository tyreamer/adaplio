@using System.Net.Http.Json
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-3" />
            @(Template == null ? "Create Template" : "Edit Template")
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (isSubmitting)
        {
            <div class="d-flex justify-center pa-4">
                <MudProgressCircular Indeterminate="true" />
                <MudText Class="ml-3">@(Template == null ? "Creating template..." : "Updating template...")</MudText>
            </div>
        }
        else
        {
            <MudForm @ref="form" Model="@request">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="request.Name"
                                      Label="Template Name"
                                      Required="true"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="request.Description"
                                      Label="Description"
                                      Lines="3"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="request.Category"
                                      Label="Category"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="request.DurationWeeks"
                                         Label="Duration (weeks)"
                                         Variant="Variant.Outlined"
                                         Min="1" Max="52" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudCheckBox T="bool" @bind-Checked="request.IsPublic" Label="Make public (visible to other trainers)" />
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-4" />

                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Exercises</MudText>
                    <MudButton Size="Size.Small"
                               Color="Color.Primary"
                               OnClick="AddExercise"
                               StartIcon="@Icons.Material.Filled.Add">
                        Add Exercise
                    </MudButton>
                </div>

                @if (request.Items.Any())
                {
                    @for (int i = 0; i < request.Items.Count; i++)
                    {
                        var item = request.Items[i];
                        var index = i; // Capture for closure
                        <MudCard Class="mb-3">
                            <MudCardContent>
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <MudText Typo="Typo.subtitle2">Exercise @(index + 1)</MudText>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Size="Size.Small"
                                                   Color="Color.Error"
                                                   OnClick="@(() => RemoveExercise(index))" />
                                </div>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="item.ExerciseName"
                                                      Label="Exercise Name"
                                                      Required="true"
                                                      Variant="Variant.Outlined" />
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudNumericField @bind-Value="item.TargetSets"
                                                         Label="Sets"
                                                         Variant="Variant.Outlined"
                                                         Min="1" />
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudNumericField @bind-Value="item.TargetReps"
                                                         Label="Reps"
                                                         Variant="Variant.Outlined"
                                                         Min="1" />
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudNumericField @bind-Value="item.HoldSeconds"
                                                         Label="Hold (sec)"
                                                         Variant="Variant.Outlined"
                                                         Min="1" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.caption" Class="mb-2">Days of week (select all that apply):</MudText>
                                        <MudChipSet T="string" MultiSelection="true" @bind-SelectedValues="@GetSelectedDays(item)">
                                            <MudChip T="string" Value="Monday">Mon</MudChip>
                                            <MudChip T="string" Value="Tuesday">Tue</MudChip>
                                            <MudChip T="string" Value="Wednesday">Wed</MudChip>
                                            <MudChip T="string" Value="Thursday">Thu</MudChip>
                                            <MudChip T="string" Value="Friday">Fri</MudChip>
                                            <MudChip T="string" Value="Saturday">Sat</MudChip>
                                            <MudChip T="string" Value="Sunday">Sun</MudChip>
                                        </MudChipSet>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-4">
                        No exercises added yet. Click "Add Exercise" to get started.
                    </MudText>
                }
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="@isSubmitting">
            @(Template == null ? "Create" : "Update")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudBlazor.MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public TemplateResponse? Template { get; set; }

    private MudForm form = null!;
    private bool isSubmitting = false;
    private TemplateRequest request = new();

    protected override void OnInitialized()
    {
        if (Template != null)
        {
            request = new TemplateRequest
            {
                Name = Template.Name,
                Description = Template.Description,
                Category = Template.Category,
                DurationWeeks = Template.DurationWeeks,
                IsPublic = Template.IsPublic,
                Items = Template.Items.Select(i => new TemplateItemRequest
                {
                    ExerciseName = i.ExerciseName,
                    TargetSets = i.TargetSets,
                    TargetReps = i.TargetReps,
                    HoldSeconds = i.HoldSeconds,
                    Days = i.Days ?? Array.Empty<string>()
                }).ToList()
            };
        }
    }

    private HashSet<string> GetSelectedDays(TemplateItemRequest item)
    {
        return new HashSet<string>(item.Days ?? Array.Empty<string>());
    }

    private void AddExercise()
    {
        request.Items.Add(new TemplateItemRequest
        {
            Days = Array.Empty<string>()
        });
    }

    private void RemoveExercise(int index)
    {
        if (index >= 0 && index < request.Items.Count)
        {
            request.Items.RemoveAt(index);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;

        if (!request.Items.Any())
        {
            Snackbar.Add("Please add at least one exercise", Severity.Warning);
            return;
        }

        isSubmitting = true;

        try
        {
            HttpResponseMessage response;
            if (Template == null)
            {
                response = await HttpClient.PostAsJsonAsync("/api/trainer/templates", request);
            }
            else
            {
                response = await HttpClient.PutAsJsonAsync($"/api/trainer/templates/{Template.Id}", request);
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TemplateResponse>();
                MudDialog.Close(DialogResult.Ok(result));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to save template: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Network error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class TemplateRequest
    {
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string? Category { get; set; }
        public int? DurationWeeks { get; set; }
        public bool IsPublic { get; set; }
        public List<TemplateItemRequest> Items { get; set; } = new();
    }

    public class TemplateItemRequest
    {
        public string ExerciseName { get; set; } = "";
        public int? TargetSets { get; set; }
        public int? TargetReps { get; set; }
        public int? HoldSeconds { get; set; }
        public string[] Days { get; set; } = Array.Empty<string>();
    }

    public class TemplateResponse
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string? Category { get; set; }
        public int? DurationWeeks { get; set; }
        public bool IsPublic { get; set; }
        public TemplateItemResponse[] Items { get; set; } = Array.Empty<TemplateItemResponse>();
    }

    public class TemplateItemResponse
    {
        public int Id { get; set; }
        public string ExerciseName { get; set; } = "";
        public int? TargetSets { get; set; }
        public int? TargetReps { get; set; }
        public int? HoldSeconds { get; set; }
        public string[]? Days { get; set; }
    }
}
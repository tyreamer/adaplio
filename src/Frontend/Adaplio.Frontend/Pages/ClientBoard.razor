@page "/board"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Weekly Board - Adaplio</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-8">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @errorMessage
        </MudAlert>
    }

    <div class="d-flex justify-space-between align-center mb-6">
        <MudText Typo="Typo.h4">
            <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Class="mr-2" />
            My Weekly Board
        </MudText>
        <div class="d-flex align-center gap-3">
            <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                           OnClick="PreviousWeek"
                           Title="Previous Week" />
            <MudText Typo="Typo.h6" Class="mx-2">
                @currentWeekStart.ToString("MMM dd") - @currentWeekStart.AddDays(6).ToString("MMM dd, yyyy")
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                           OnClick="NextWeek"
                           Title="Next Week" />
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-center pa-8">
            <MudProgressCircular Indeterminate="true" />
            <MudText Class="ml-3">Loading board...</MudText>
        </div>
    }
    else if (board != null)
    {
        <MudGrid>
            @foreach (var day in board.Days)
            {
                <MudItem xs="12" sm="6" lg="1.714">
                    <MudCard Style="min-height: 400px;">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Align="Align.Center">
                                    @day.DayName
                                </MudText>
                                <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Secondary">
                                    @day.Date.ToString("MMM dd")
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-2">
                            @if (day.Exercises.Any())
                            {
                                @foreach (var exercise in day.Exercises)
                                {
                                    <MudCard Class="mb-2" Outlined="true">
                                        <MudCardContent Class="pa-3">
                                            <MudText Typo="Typo.body2" Class="font-weight-medium">
                                                @exercise.ExerciseName
                                            </MudText>
                                            @if (exercise.TargetSets.HasValue || exercise.TargetReps.HasValue)
                                            {
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    @exercise.TargetSets sets × @exercise.TargetReps reps
                                                    @if (exercise.HoldSeconds.HasValue)
                                                    {
                                                        <text> × @exercise.HoldSeconds sec</text>
                                                    }
                                                </MudText>
                                            }

                                            <div class="mt-2">
                                                @if (exercise.Status == "planned")
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Default">Planned</MudChip>
                                                    <div class="mt-2">
                                                        <MudButton Size="Size.Small"
                                                                   Variant="Variant.Filled"
                                                                   Color="Color.Success"
                                                                   OnClick="@(() => QuickLogComplete(exercise.ExerciseInstanceId))"
                                                                   FullWidth="true">
                                                            Mark Done
                                                        </MudButton>
                                                    </div>
                                                }
                                                else if (exercise.Status == "done")
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Success">
                                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" />
                                                        Completed
                                                    </MudChip>
                                                }
                                                else if (exercise.Status == "partial")
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning">Partial</MudChip>
                                                }
                                                else if (exercise.Status == "skipped")
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Secondary">Skipped</MudChip>
                                                }
                                            </div>

                                            @if (!string.IsNullOrEmpty(exercise.Notes))
                                            {
                                                <MudText Typo="Typo.caption" Class="mt-1" Style="font-style: italic;">
                                                    @exercise.Notes
                                                </MudText>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                }
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-4">
                                    No exercises scheduled
                                </MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        @if (board.Days.SelectMany(d => d.Exercises).Any())
        {
            <MudCard Class="mt-6">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-3">Weekly Summary</MudText>
                    @{
                        var totalExercises = board.Days.SelectMany(d => d.Exercises).Count();
                        var completedExercises = board.Days.SelectMany(d => d.Exercises).Count(e => e.Status == "done");
                        var percentage = totalExercises > 0 ? (decimal)completedExercises / totalExercises * 100 : 0;
                    }
                    <MudGrid>
                        <MudItem xs="4">
                            <MudText Typo="Typo.body1">Total Exercises: @totalExercises</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudText Typo="Typo.body1">Completed: @completedExercises</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudText Typo="Typo.body1">Progress: @percentage.ToString("F1")%</MudText>
                        </MudItem>
                    </MudGrid>
                    <MudProgressLinear Value="@((int)percentage)" Class="mt-2" />
                </MudCardContent>
            </MudCard>
        }
    }
    else
    {
        <MudCard>
            <MudCardContent Class="text-center py-8">
                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h6" Class="mt-4">No active plans</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    You don't have any active exercise plans yet. Check your proposals!
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Href="/proposals"
                           Class="mt-4"
                           StartIcon="@Icons.Material.Filled.Inbox">
                    View Proposals
                </MudButton>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private DateOnly currentWeekStart = GetCurrentWeekStart();
    private BoardResponse? board;
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthAndRedirect();
        await LoadBoard();
    }

    private async Task CheckAuthAndRedirect()
    {
        try
        {
            var response = await HttpClient.GetAsync("/auth/me");
            if (!response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/auth/client/login");
                return;
            }

            var userInfo = await response.Content.ReadFromJsonAsync<JsonElement>();
            if (userInfo.GetProperty("userType").GetString() != "client")
            {
                NavigationManager.NavigateTo("/auth/client/login");
            }
        }
        catch
        {
            NavigationManager.NavigateTo("/auth/client/login");
        }
    }

    private async Task LoadBoard()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var response = await HttpClient.GetAsync($"/api/client/board?weekStart={currentWeekStart:yyyy-MM-dd}");
            if (response.IsSuccessStatusCode)
            {
                board = await response.Content.ReadFromJsonAsync<BoardResponse>();
            }
            else
            {
                errorMessage = "Failed to load board.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Network error while loading board.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PreviousWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(-7);
        await LoadBoard();
    }

    private async Task NextWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(7);
        await LoadBoard();
    }

    private async Task QuickLogComplete(int exerciseInstanceId)
    {
        try
        {
            var request = new { ExerciseInstanceId = exerciseInstanceId, Completed = true };
            var response = await HttpClient.PostAsJsonAsync("/api/client/board/quick-log", request);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Exercise marked as completed!", Severity.Success);
                await LoadBoard(); // Refresh the board
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to log progress: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Network error: {ex.Message}", Severity.Error);
        }
    }

    private static DateOnly GetCurrentWeekStart()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        var dayOfWeek = (int)today.DayOfWeek;
        var daysToSubtract = dayOfWeek == 0 ? 6 : dayOfWeek - 1; // Sunday = 6 days back
        return today.AddDays(-daysToSubtract);
    }

    public class BoardResponse
    {
        public DateOnly WeekStart { get; set; }
        public DateOnly WeekEnd { get; set; }
        public DayBoardResponse[] Days { get; set; } = Array.Empty<DayBoardResponse>();
    }

    public class DayBoardResponse
    {
        public string DayName { get; set; } = "";
        public DateOnly Date { get; set; }
        public int DayOfWeek { get; set; }
        public ExerciseCardResponse[] Exercises { get; set; } = Array.Empty<ExerciseCardResponse>();
    }

    public class ExerciseCardResponse
    {
        public int ExerciseInstanceId { get; set; }
        public string ExerciseName { get; set; } = "";
        public string? ExerciseDescription { get; set; }
        public int? TargetSets { get; set; }
        public int? TargetReps { get; set; }
        public int? HoldSeconds { get; set; }
        public string Status { get; set; } = "";
        public int? CompletedSets { get; set; }
        public int? CompletedReps { get; set; }
        public int? CompletedHoldSeconds { get; set; }
        public string? Notes { get; set; }
    }
}
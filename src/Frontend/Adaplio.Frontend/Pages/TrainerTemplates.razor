@page "/trainer/templates"
@using System.Net.Http.Json
@using System.Text.Json
@using Adaplio.Frontend.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthStateService AuthState

<PageTitle>My Templates - Adaplio</PageTitle>

@if (!_isAuthorized)
{
    return;
}

<MudContainer MaxWidth="MaxWidth.Large" Class="my-8">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @errorMessage
        </MudAlert>
    }

    <div class="d-flex justify-space-between align-center mb-6">
        <MudText Typo="Typo.h4">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2" />
            My Plan Templates
        </MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="CreateTemplate"
                   StartIcon="@Icons.Material.Filled.Add">
            Create Template
        </MudButton>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-center pa-8">
            <MudProgressCircular Indeterminate="true" />
            <MudText Class="ml-3">Loading templates...</MudText>
        </div>
    }
    else if (!templates.Any())
    {
        <MudCard>
            <MudCardContent Class="text-center py-8">
                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h6" Class="mt-4">No templates yet</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Create your first plan template to get started
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="CreateTemplate"
                           Class="mt-4"
                           StartIcon="@Icons.Material.Filled.Add">
                    Create Template
                </MudButton>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <MudGrid>
            @foreach (var template in templates)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@template.Name</MudText>
                                @if (!string.IsNullOrEmpty(template.Category))
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Primary">@template.Category</MudChip>
                                }
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem OnClick="@(() => EditTemplate(template.Id))">
                                        <MudIcon Icon="@Icons.Material.Filled.Edit" Style="margin-right: 8px" />
                                        Edit
                                    </MudMenuItem>
                                    <MudMenuItem OnClick="@(() => DeleteTemplate(template.Id, template.Name))">
                                        <MudIcon Icon="@Icons.Material.Filled.Delete" Style="margin-right: 8px" />
                                        Delete
                                    </MudMenuItem>
                                </MudMenu>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (!string.IsNullOrEmpty(template.Description))
                            {
                                <MudText Typo="Typo.body2" Class="mb-2">@template.Description</MudText>
                            }
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @template.Items.Length exercises
                                @if (template.DurationWeeks.HasValue)
                                {
                                    <text> • @template.DurationWeeks weeks</text>
                                }
                            </MudText>
                            <MudDivider Class="my-2" />
                            <div style="max-height: 120px; overflow-y: auto;">
                                @foreach (var item in template.Items.Take(3))
                                {
                                    <MudText Typo="Typo.caption" Class="d-block">
                                        • @item.ExerciseName
                                        @if (item.TargetSets.HasValue || item.TargetReps.HasValue)
                                        {
                                            <text> (@item.TargetSets sets × @item.TargetReps reps)</text>
                                        }
                                    </MudText>
                                }
                                @if (template.Items.Length > 3)
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        +@(template.Items.Length - 3) more exercises...
                                    </MudText>
                                }
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Size="Size.Small"
                                       Color="Color.Primary"
                                       OnClick="@(() => ViewTemplate(template.Id))">
                                View Details
                            </MudButton>
                            <MudButton Size="Size.Small"
                                       Color="Color.Secondary"
                                       OnClick="@(() => CreateProposal(template.Id))">
                                Propose to Client
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private List<TemplateResponse> templates = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private bool _isAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        await AuthState.InitializeAsync();

        if (!AuthState.IsAuthenticated || !AuthState.IsTrainer)
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
        }

        _isAuthorized = true;
        await LoadTemplates();
    }

    private async Task LoadTemplates()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var response = await HttpClient.GetAsync("/api/trainer/templates");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TemplateListResponse>();
                templates = result?.Templates?.ToList() ?? new List<TemplateResponse>();
            }
            else
            {
                errorMessage = "Failed to load templates.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Network error while loading templates.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateTemplate()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<TemplateDialog>("Create Template", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is TemplateResponse newTemplate)
        {
            templates.Insert(0, newTemplate);
            Snackbar.Add("Template created successfully!", Severity.Success);
        }
    }

    private async Task EditTemplate(int templateId)
    {
        var template = templates.FirstOrDefault(t => t.Id == templateId);
        if (template == null) return;

        var parameters = new DialogParameters { { "Template", template } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<TemplateDialog>("Edit Template", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is TemplateResponse updatedTemplate)
        {
            var index = templates.FindIndex(t => t.Id == templateId);
            if (index >= 0)
            {
                templates[index] = updatedTemplate;
                Snackbar.Add("Template updated successfully!", Severity.Success);
            }
        }
    }

    private async Task DeleteTemplate(int templateId, string templateName)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Delete Template",
            $"Are you sure you want to delete '{templateName}'? This action cannot be undone.",
            yesText: "Delete", cancelText: "Cancel");

        if (confirm == true)
        {
            try
            {
                var response = await HttpClient.DeleteAsync($"/api/trainer/templates/{templateId}");
                if (response.IsSuccessStatusCode)
                {
                    templates.RemoveAll(t => t.Id == templateId);
                    Snackbar.Add("Template deleted successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to delete template.", Severity.Error);
                }
            }
            catch (Exception)
            {
                Snackbar.Add("Network error while deleting template.", Severity.Error);
            }
        }
    }

    private void ViewTemplate(int templateId)
    {
        NavigationManager.NavigateTo($"/trainer/templates/{templateId}");
    }

    private void CreateProposal(int templateId)
    {
        NavigationManager.NavigateTo($"/trainer/proposals/create?templateId={templateId}");
    }

    public class TemplateResponse
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string? Category { get; set; }
        public int? DurationWeeks { get; set; }
        public bool IsPublic { get; set; }
        public DateTimeOffset CreatedAt { get; set; }
        public DateTimeOffset UpdatedAt { get; set; }
        public TemplateItemResponse[] Items { get; set; } = Array.Empty<TemplateItemResponse>();
    }

    public class TemplateItemResponse
    {
        public int Id { get; set; }
        public string ExerciseName { get; set; } = "";
        public string? ExerciseDescription { get; set; }
        public string? ExerciseCategory { get; set; }
        public int? TargetSets { get; set; }
        public int? TargetReps { get; set; }
        public int? HoldSeconds { get; set; }
        public int? FrequencyPerWeek { get; set; }
        public string[]? Days { get; set; }
        public string? Notes { get; set; }
    }

    public class TemplateListResponse
    {
        public TemplateResponse[] Templates { get; set; } = Array.Empty<TemplateResponse>();
    }
}
@page "/home/trainer"
@using Adaplio.Frontend.Services
@using Adaplio.Frontend.Components.Trainer
@inject AuthStateService AuthState
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Clients Overview - Adaplio</PageTitle>

<RoleGate TrainerOnly="true">

<div class="trainer-home-modern">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="py-8">
        <!-- Modern Header -->
        <div class="page-header">
            <div class="header-content">
                <h1 class="modern-header">Clients Overview</h1>
                <p class="modern-subheader">
                    Welcome back, @AuthState.FullName — @GetClientSummary()
                </p>
            </div>

            <div class="header-actions">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="modern-invite-btn"
                           StartIcon="@Icons.Material.Filled.PersonAdd"
                           OnClick="SendInvite">
                    Invite Client
                </MudButton>

                <div class="filter-tabs">
                    <button class="filter-tab @(_currentFilter == "all" ? "active" : "")"
                            @onclick="@(() => SetFilter("all"))">
                        All (@_clients.Count)
                    </button>
                    <button class="filter-tab @(_currentFilter == "summary" ? "active" : "")"
                            @onclick="@(() => SetFilter("summary"))">
                        Summary (@_clients.Count(c => c.SharesSummary))
                    </button>
                    <button class="filter-tab @(_currentFilter == "private" ? "active" : "")"
                            @onclick="@(() => SetFilter("private"))">
                        Private (@_clients.Count(c => !c.SharesSummary))
                    </button>
                </div>

                <!-- Top-right Icons for Notifications -->
                <div class="top-actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Notifications"
                                   Class="notification-icon"
                                   OnClick="ToggleNotifications">
                        @if (_notifications.Any(n => !n.IsRead))
                        {
                            <MudBadge Content="@_notifications.Count(n => !n.IsRead)"
                                      Color="Color.Error"
                                      Overlap="true"
                                      Class="notification-badge" />
                        }
                    </MudIconButton>
                </div>
            </div>
        </div>

        <!-- Summary Banner -->
        @if (_clients.Any())
        {
            <div class="summary-banner">
                <div class="summary-content">
                    <span class="summary-count">@_clients.Count Clients</span>
                    <span class="summary-separator">·</span>
                    <span class="summary-adherence">@GetAverageAdherence()% Average Adherence</span>
                </div>
            </div>
        }

        <!-- Main Client Cards Section -->
        <div class="clients-section">
            @if (_isLoading)
            {
                <div class="loading-cards">
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="client-card loading">
                            <MudSkeleton Height="180px" />
                        </div>
                    }
                </div>
            }
            else if (!_filteredClients.Any())
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <MudIcon Icon="@Icons.Material.Outlined.PersonSearch" Size="Size.Large" />
                    </div>
                    <div class="empty-state-title">No clients yet</div>
                    <div class="empty-state-description">
                        Start building your client base by sending your first invite.
                        Once clients accept, they'll appear here as beautiful cards.
                    </div>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.PersonAdd"
                               OnClick="SendInvite"
                               Class="empty-state-action">
                        Send First Invite
                    </MudButton>
                </div>
            }
            else
            {
                <div class="client-cards-grid">
                    @{int index = 0;}
                    @foreach (var client in _filteredClients)
                    {
                        <div class="client-card-wrapper" style="animation-delay: @((index * 100))ms;">
                            <ClientCard ClientData="@client"
                                        OnViewDetails="@ViewClientDetails"
                                        OnSendProposal="@SendProposal"
                                        OnManageClient="@ManageClient" />
                        </div>
                        index++;
                    }
                </div>
            }
        </div>
    </MudContainer>

    <!-- Notification Slide Panel -->
    <NotificationPanel IsOpen="@_notificationPanelOpen"
                       Notifications="@_convertedNotifications"
                       IsOpenChanged="@OnNotificationPanelToggle"
                       OnNotificationRead="@OnNotificationRead"
                       OnMarkAllRead="@OnMarkAllNotificationsRead" />

    <!-- Floating Action Button -->
    <FloatingActionButton OnNewProposal="@OnNewProposal"
                           OnUploadVideo="@OnUploadVideo"
                           OnSendInvite="@SendInvite" />
</div>

<style>
/* 2025 Minimal SaaS Trainer Home */
.trainer-home-modern {
    background: var(--color-background);
    min-height: 100vh;
    font-family: var(--font-family-primary);
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-xxxxl);
    gap: var(--space-xl);
}

.header-content {
    flex: 1;
}

.header-actions {
    display: flex;
    align-items: center;
    gap: var(--space-xl);
}

.filter-tabs {
    display: flex;
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-xs);
    box-shadow: var(--elevation-2);
    gap: var(--space-xs);
}

.filter-tab {
    background: transparent;
    border: none;
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-md);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-neutral-700);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-standard);
    white-space: nowrap;
}

.filter-tab:hover {
    background: var(--color-neutral-100);
    color: var(--color-neutral-900);
}

.filter-tab.active {
    background: var(--color-primary);
    color: var(--color-primary-on);
    box-shadow: var(--elevation-1);
}

.top-actions {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
}

.notification-icon {
    padding: var(--space-md);
    border-radius: var(--radius-lg);
    background: var(--color-surface);
    box-shadow: var(--elevation-2);
    color: var(--color-neutral-700);
    transition: all var(--duration-fast) var(--easing-standard);
}

.notification-icon:hover {
    background: var(--color-neutral-100);
    transform: translateY(-1px);
    box-shadow: var(--elevation-3);
}

.clients-section {
    width: 100%;
}

.client-cards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    gap: var(--space-xl);
    width: 100%;
}

.client-card-wrapper {
    animation: cardSlideIn 500ms cubic-bezier(0.4, 0.0, 0.2, 1) both;
}

@@keyframes cardSlideIn {
    from {
        opacity: 0;
        transform: translateY(30px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.loading-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    gap: var(--space-xl);
}

.loading-cards .client-card.loading {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-xl);
    box-shadow: var(--elevation-2);
}

.empty-state-action {
    margin-top: var(--space-lg);
}

/* Modern 2025 Styles */
.modern-invite-btn {
    border-radius: 24px !important;
    font-weight: 600 !important;
    text-transform: none !important;
    padding: 12px 24px !important;
    box-shadow: 0 1px 2px rgba(16, 24, 40, 0.05) !important;
    transition: all 200ms cubic-bezier(0.4, 0.0, 0.2, 1) !important;
}

.modern-invite-btn:hover {
    transform: translateY(-2px) scale(1.02) !important;
    box-shadow: 0 8px 25px rgba(255, 122, 0, 0.3) !important;
}

.modern-invite-btn:active {
    transform: translateY(0) scale(0.98) !important;
    transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1) !important;
}

.summary-banner {
    background: #FFFFFF;
    border: 1px solid #EEEEEE;
    border-radius: 20px;
    padding: 20px 32px;
    margin-bottom: 32px;
    box-shadow: 0 1px 3px rgba(16, 24, 40, 0.1), 0 1px 2px rgba(16, 24, 40, 0.06);
    transition: all 300ms cubic-bezier(0.4, 0.0, 0.2, 1);
    animation: bannerSlideIn 600ms cubic-bezier(0.4, 0.0, 0.2, 1);
}

.summary-banner:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(16, 24, 40, 0.12), 0 4px 10px rgba(16, 24, 40, 0.08);
}

@@keyframes bannerSlideIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.summary-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    font-size: 1rem;
    font-weight: 600;
}

.summary-count {
    color: #1E2837;
}

.summary-separator {
    color: #9E9E9E;
    font-weight: 400;
}

.summary-adherence {
    color: #00BFA5;
}

.modern-header {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    font-size: 2rem;
    font-weight: 700;
    color: #1E2837;
    margin: 0 0 8px 0;
    line-height: 1.2;
}

.modern-subheader {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    font-size: 1rem;
    color: #757575;
    margin: 0;
    line-height: 1.4;
}

/* Updated filter tabs for pill style */
.filter-tabs {
    background: #F5F5F5;
    border-radius: 24px;
    padding: 4px;
    box-shadow: none;
    border: 1px solid #EEEEEE;
}

.filter-tab {
    background: transparent;
    border: none;
    padding: 8px 16px;
    border-radius: 20px;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    font-size: 0.875rem;
    font-weight: 500;
    color: #757575;
    cursor: pointer;
    transition: all 200ms cubic-bezier(0.4, 0.0, 0.2, 1);
}

.filter-tab:hover {
    background: #EEEEEE;
    color: #1E2837;
    transform: translateY(-1px);
}

.filter-tab.active {
    background: #FFFFFF;
    color: #FF7A00;
    font-weight: 600;
    box-shadow: 0 1px 3px rgba(16, 24, 40, 0.1), 0 1px 2px rgba(16, 24, 40, 0.06);
    transform: scale(1.02);
}

.filter-tab.active:hover {
    transform: scale(1.02) translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 122, 0, 0.15);
}

/* Mobile responsive */
@@media (max-width: 768px) {
    .page-header {
        flex-direction: column;
        gap: 20px;
        align-items: stretch;
    }

    .header-actions {
        flex-direction: column;
        gap: 16px;
        align-items: stretch;
    }

    .filter-tabs {
        order: 2;
    }

    .modern-invite-btn {
        order: 1;
        align-self: flex-start;
    }

    .summary-banner {
        padding: 16px 20px;
        margin-bottom: 24px;
    }

    .summary-content {
        font-size: 0.875rem;
        gap: 8px;
    }

    .modern-header {
        font-size: 1.75rem;
    }

    .modern-subheader {
        font-size: 0.875rem;
    }
}

</style>

@code {
    private bool _isLoading = true;
    private string _currentFilter = "all";
    private bool _notificationPanelOpen = false;
    private List<ClientData> _clients = new();
    private List<Notification> _notifications = new();

    private IEnumerable<ClientData> _filteredClients => _currentFilter switch
    {
        "summary" => _clients.Where(c => c.SharesSummary),
        "private" => _clients.Where(c => !c.SharesSummary),
        _ => _clients
    };

    private List<Components.Trainer.NotificationPanel.Notification> _convertedNotifications =>
        _notifications.Select(n => new Components.Trainer.NotificationPanel.Notification
        {
            Message = n.Message,
            CreatedAt = n.CreatedAt,
            IsRead = n.IsRead
        }).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        StateHasChanged();

        // Simulate API delay
        await Task.Delay(1000);

        // Mock data - Enhanced for 2025 design
        _clients = new List<ClientData>
        {
            new() { Id = 1, Alias = "C-AB12", DisplayName = "Sarah's Recovery Journey", Email = "sarah.j@email.com", SharesSummary = true, AdherencePercent = 85, LastActivity = DateTime.Now.AddHours(-2) },
            new() { Id = 2, Alias = "C-CD34", DisplayName = "Mike's Strength Training", Email = "mike.r@email.com", SharesSummary = false, AdherencePercent = 92, LastActivity = DateTime.Now.AddDays(-1) },
            new() { Id = 3, Alias = "C-EF56", DisplayName = "Getting Stronger 💪", Email = "alex.m@email.com", SharesSummary = true, AdherencePercent = 67, LastActivity = DateTime.Now.AddDays(-3) },
            new() { Id = 4, Alias = "C-GH78", DisplayName = null, Email = "client4@email.com", SharesSummary = true, AdherencePercent = 94, LastActivity = DateTime.Now.AddHours(-4) },
            new() { Id = 5, Alias = "C-IJ90", DisplayName = "Recovery Plus", Email = "jamie.l@email.com", SharesSummary = false, AdherencePercent = 78, LastActivity = DateTime.Now.AddDays(-2) }
        };

        _notifications = new List<Notification>
        {
            new() { Message = "C-AB12 declined Hip Extension exercise", CreatedAt = DateTime.Now.AddMinutes(-30), IsRead = false },
            new() { Message = "C-CD34 changed sharing scope to Private", CreatedAt = DateTime.Now.AddHours(-2), IsRead = false },
            new() { Message = "C-EF56 completed Week 1 milestone", CreatedAt = DateTime.Now.AddDays(-1), IsRead = true }
        };

        _isLoading = false;
        StateHasChanged();
    }

    private void SetFilter(string filter)
    {
        _currentFilter = filter;
        StateHasChanged();
    }

    private async Task SendInvite()
    {
        // Generate grant code and copy to clipboard
        var grantCode = "GRANT-" + Guid.NewGuid().ToString("N")[..8].ToUpper();

        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", grantCode);
            Snackbar.Add($"Grant code {grantCode} copied to clipboard!", Severity.Success);
        }
        catch
        {
            Snackbar.Add($"Grant code: {grantCode} (Please copy manually)", Severity.Info);
        }
    }

    private void ViewSummary(int clientId)
    {
        Navigation.NavigateTo($"/clients/{clientId}/summary");
    }

    private void NewProposal(int clientId)
    {
        Navigation.NavigateTo($"/proposals/new?clientId={clientId}");
    }

    private async Task UploadVideo()
    {
        Navigation.NavigateTo("/media/upload");
    }

    // New 2025 functionality
    private string GetClientSummary()
    {
        if (!_clients.Any()) return "No clients connected yet";

        var activeToday = _clients.Count(c => c.LastActivity.Date == DateTime.Today);
        var avgAdherence = _clients.Average(c => c.AdherencePercent);

        return $"{_clients.Count} client{(_clients.Count == 1 ? "" : "s")}, {avgAdherence:F0}% avg adherence";
    }

    private int GetAverageAdherence()
    {
        if (!_clients.Any()) return 0;
        return (int)Math.Round(_clients.Average(c => c.AdherencePercent));
    }

    private void ToggleNotifications()
    {
        _notificationPanelOpen = !_notificationPanelOpen;
    }

    private async Task OnNotificationPanelToggle(bool isOpen)
    {
        _notificationPanelOpen = isOpen;
    }

    private async Task OnNotificationRead(Components.Trainer.NotificationPanel.Notification notification)
    {
        // Handle individual notification read
        StateHasChanged();
    }

    private async Task OnMarkAllNotificationsRead()
    {
        // Handle mark all notifications as read
        StateHasChanged();
    }

    private async Task ViewClientDetails(ClientData client)
    {
        if (client.SharesSummary)
        {
            Navigation.NavigateTo($"/clients/{client.Id}/summary");
        }
        else
        {
            Snackbar.Add("Client hasn't shared summary access", Severity.Info);
        }
    }

    private async Task SendProposal(ClientData client)
    {
        Navigation.NavigateTo($"/proposals/new?clientId={client.Id}");
    }

    private async Task ManageClient(ClientData client)
    {
        Navigation.NavigateTo($"/clients/{client.Id}/manage");
    }

    // FAB Actions
    private async Task OnNewProposal()
    {
        Navigation.NavigateTo("/proposals/new");
    }

    private async Task OnUploadVideo()
    {
        Navigation.NavigateTo("/media/upload");
    }

    private Color GetAdherenceColor(int percentage)
    {
        return percentage >= 80 ? Color.Success :
               percentage >= 60 ? Color.Warning :
               Color.Error;
    }


    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        return timeSpan.TotalMinutes < 60 ? $"{(int)timeSpan.TotalMinutes}m ago" :
               timeSpan.TotalHours < 24 ? $"{(int)timeSpan.TotalHours}h ago" :
               timeSpan.TotalDays < 7 ? $"{(int)timeSpan.TotalDays}d ago" :
               dateTime.ToString("MMM dd");
    }


    private string GetClientDisplayName(ClientData client)
    {
        if (!string.IsNullOrWhiteSpace(client.DisplayName))
        {
            return $"{client.DisplayName} ({client.Alias})";
        }
        return client.Alias;
    }

    // Data models
    public class ClientData
    {
        public int Id { get; set; }
        public string Alias { get; set; } = "";
        public string? DisplayName { get; set; }
        public string Email { get; set; } = "";
        public bool SharesSummary { get; set; }
        public int AdherencePercent { get; set; }
        public DateTime LastActivity { get; set; }
    }

    public class Notification
    {
        public string Message { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public bool IsRead { get; set; }
    }
}

</RoleGate>
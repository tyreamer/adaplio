@page "/home/trainer"
@using Adaplio.Frontend.Services
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@inject AuthStateService AuthState
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Patients - Adaplio</PageTitle>

<div class="trainer-dashboard">
    <!-- Navigation Header -->
    <nav class="dashboard-nav">
        <div class="nav-container">
            <div class="nav-brand">
                <span class="logo-icon">ðŸ§¡</span>
                <span class="brand-name">Adaplio</span>
            </div>
            <div class="nav-links">
                <a href="/home/trainer" class="nav-link active">Dashboard</a>
                <a href="/exercises" class="nav-link">Exercises</a>
                <a href="/patients" class="nav-link highlighted">Patients</a>
                <a href="/messages" class="nav-link">Messages</a>
            </div>
            <div class="nav-actions">
                <button class="notification-btn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
                        <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
                    </svg>
                </button>
                <div class="profile-avatar">
                    <span class="avatar-initials">@GetInitials()</span>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="dashboard-content">
        <div class="content-container">
            <!-- Page Header -->
            <div class="page-header">
                <h1 class="page-title">Patients</h1>
                <button class="invite-btn" @onclick="ShowInviteModal">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="12" y1="5" x2="12" y2="19"></line>
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                    </svg>
                    Invite New Patient
                </button>
            </div>

            <!-- Filter Tabs -->
            <div class="filter-tabs">
                <button class="filter-tab @(_currentFilter == "all" ? "active" : "")" @onclick="@(() => SetFilter("all"))">
                    All Patients
                </button>
                <button class="filter-tab @(_currentFilter == "active" ? "active" : "")" @onclick="@(() => SetFilter("active"))">
                    Active
                </button>
                <button class="filter-tab @(_currentFilter == "needs-nudge" ? "active" : "")" @onclick="@(() => SetFilter("needs-nudge"))">
                    Needs a Nudge
                </button>
            </div>

            <!-- Patients Grid -->
            <div class="patients-grid">
                @if (_isLoading)
                {
                    @for (int i = 0; i < 6; i++)
                    {
                        <div class="patient-card loading">
                            <div class="patient-avatar skeleton"></div>
                            <div class="patient-info">
                                <div class="patient-name skeleton-text"></div>
                                <div class="patient-activity skeleton-text"></div>
                                <div class="patient-stats">
                                    <div class="skeleton-text small"></div>
                                    <div class="skeleton-text small"></div>
                                </div>
                                <div class="progress-bar skeleton-bar"></div>
                            </div>
                        </div>
                    }
                }
                else if (_filteredPatients.Any())
                {
                    @foreach (var patient in _filteredPatients)
                    {
                        <div class="patient-card" @onclick="@(() => ViewPatient(patient.Id))">
                            <div class="patient-avatar">
                                @if (!string.IsNullOrEmpty(patient.AvatarUrl))
                                {
                                    <img src="@patient.AvatarUrl" alt="@patient.Name" class="avatar-image" />
                                }
                                else
                                {
                                    <span class="avatar-initials">@GetPatientInitials(patient.Name)</span>
                                }
                            </div>
                            <div class="patient-info">
                                <h3 class="patient-name">@patient.Name</h3>
                                <p class="patient-activity">Last active: @patient.LastActiveText</p>
                                <div class="patient-stats">
                                    <div class="stat-item">
                                        <span class="stat-label">Level @patient.Level</span>
                                        <span class="stat-separator">â€¢</span>
                                        <span class="stat-value">Streak: @patient.StreakDays days</span>
                                    </div>
                                </div>
                                <div class="progress-section">
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: @(patient.ProgressPercentage)%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#9CA3AF" stroke-width="1.5">
                                <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
                                <circle cx="9" cy="7" r="4"></circle>
                                <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
                                <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                            </svg>
                        </div>
                        <h3 class="empty-title">No patients yet</h3>
                        <p class="empty-description">Start building your patient base by sending your first invite.</p>
                        <button class="empty-action-btn" @onclick="ShowInviteModal">
                            Invite Your First Patient
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Invite Modal -->
    @if (_showInviteModal)
    {
        <div class="modal-overlay" @onclick="CloseInviteModal">
            <div class="modal-content" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h3>Invite New Patient</h3>
                    <button class="close-btn" @onclick="CloseInviteModal">Ã—</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_inviteModel" OnValidSubmit="@SendInvite">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label class="form-label">Patient Email</label>
                            <input type="email"
                                   @bind="_inviteModel.Email"
                                   class="form-input"
                                   placeholder="patient@email.com"
                                   disabled="@_isSending" />
                            <ValidationMessage For="@(() => _inviteModel.Email)" class="validation-error" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">Personal Message (Optional)</label>
                            <textarea @bind="_inviteModel.Message"
                                      class="form-textarea"
                                      placeholder="Welcome to Adaplio! I'm excited to work with you on your recovery journey."
                                      disabled="@_isSending"
                                      rows="3"></textarea>
                        </div>

                        <div class="form-actions">
                            <button type="button" class="cancel-btn" @onclick="CloseInviteModal" disabled="@_isSending">
                                Cancel
                            </button>
                            <button type="submit" class="submit-btn" disabled="@(_isSending || string.IsNullOrWhiteSpace(_inviteModel.Email))">
                                @if (_isSending)
                                {
                                    <span class="loading-spinner"></span>
                                    <text>Sending...</text>
                                }
                                else
                                {
                                    <text>Send Invite</text>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

<style>
.trainer-dashboard {
    min-height: 100vh;
    background: #F9F7F4; /* Cream background */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

/* Navigation */
.dashboard-nav {
    background: white;
    border-bottom: 1px solid #E5E7EB;
    padding: 0 24px;
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 64px;
}

.nav-brand {
    display: flex;
    align-items: center;
    font-weight: 600;
    font-size: 20px;
    color: #1F2937;
}

.logo-icon {
    font-size: 24px;
    margin-right: 8px;
}

.nav-links {
    display: flex;
    gap: 32px;
}

.nav-link {
    color: #6B7280;
    text-decoration: none;
    font-weight: 500;
    padding: 8px 0;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
}

.nav-link:hover {
    color: #1F2937;
}

.nav-link.active {
    color: #1F2937;
}

.nav-link.highlighted {
    color: #FF6B35;
    border-bottom-color: #FF6B35;
}

.nav-actions {
    display: flex;
    align-items: center;
    gap: 16px;
}

.notification-btn {
    background: none;
    border: none;
    color: #6B7280;
    cursor: pointer;
    padding: 8px;
    border-radius: 8px;
    transition: background-color 0.2s ease;
}

.notification-btn:hover {
    background: #F3F4F6;
}

.profile-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: #FF6B35;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 12px;
}

.avatar-initials {
    text-transform: uppercase;
}

/* Main Content */
.dashboard-content {
    padding: 32px 24px;
}

.content-container {
    max-width: 1200px;
    margin: 0 auto;
}

/* Page Header */
.page-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 32px;
}

.page-title {
    font-size: 36px;
    font-weight: 700;
    color: #1F2937;
    margin: 0;
}

.invite-btn {
    background: #FF6B35;
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
}

.invite-btn:hover {
    background: #E55A2E;
    transform: translateY(-1px);
}

/* Filter Tabs */
.filter-tabs {
    display: flex;
    gap: 8px;
    margin-bottom: 32px;
    background: #F3F4F6;
    padding: 4px;
    border-radius: 12px;
    width: fit-content;
}

.filter-tab {
    background: transparent;
    border: none;
    padding: 12px 20px;
    border-radius: 8px;
    font-weight: 500;
    color: #6B7280;
    cursor: pointer;
    transition: all 0.2s ease;
}

.filter-tab:hover {
    color: #1F2937;
}

.filter-tab.active {
    background: white;
    color: #1F2937;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

/* Patients Grid */
.patients-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 24px;
}

.patient-card {
    background: white;
    border-radius: 16px;
    padding: 24px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid #F3F4F6;
}

.patient-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    border-color: #E5E7EB;
}

.patient-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: linear-gradient(135deg, #FED7AA, #F9A8D4);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 16px;
    overflow: hidden;
}

.avatar-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.patient-avatar .avatar-initials {
    font-size: 24px;
    font-weight: 600;
    color: white;
}

.patient-info {
    flex: 1;
}

.patient-name {
    font-size: 20px;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 8px 0;
}

.patient-activity {
    font-size: 14px;
    color: #6B7280;
    margin: 0 0 16px 0;
}

.patient-stats {
    margin-bottom: 16px;
}

.stat-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
}

.stat-label {
    background: #10B981;
    color: white;
    padding: 4px 8px;
    border-radius: 6px;
    font-weight: 500;
    font-size: 12px;
}

.stat-separator {
    color: #9CA3AF;
}

.stat-value {
    color: #FF6B35;
    font-weight: 500;
}

.progress-section {
    margin-top: 16px;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: #F3F4F6;
    border-radius: 4px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #FF6B35, #FFA726);
    border-radius: 4px;
    transition: width 0.3s ease;
}

/* Loading States */
.patient-card.loading {
    pointer-events: none;
}

.skeleton {
    background: linear-gradient(90deg, #F3F4F6 25%, #E5E7EB 50%, #F3F4F6 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    border-radius: 50%;
}

.skeleton-text {
    background: linear-gradient(90deg, #F3F4F6 25%, #E5E7EB 50%, #F3F4F6 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    height: 16px;
    border-radius: 4px;
    margin-bottom: 8px;
}

.skeleton-text.small {
    height: 12px;
    width: 60%;
}

.skeleton-bar {
    background: linear-gradient(90deg, #F3F4F6 25%, #E5E7EB 50%, #F3F4F6 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    height: 8px;
    border-radius: 4px;
}

@@keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
}

/* Empty State */
.empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: 80px 20px;
}

.empty-icon {
    margin-bottom: 24px;
}

.empty-title {
    font-size: 24px;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 12px 0;
}

.empty-description {
    font-size: 16px;
    color: #6B7280;
    margin: 0 0 32px 0;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
}

.empty-action-btn {
    background: #FF6B35;
    color: white;
    border: none;
    padding: 16px 32px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.empty-action-btn:hover {
    background: #E55A2E;
    transform: translateY(-1px);
}

/* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    padding: 24px;
}

.modal-content {
    background: white;
    border-radius: 16px;
    padding: 32px;
    max-width: 500px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 24px;
}

.modal-header h3 {
    font-size: 24px;
    font-weight: 600;
    color: #1F2937;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    font-size: 24px;
    color: #6B7280;
    cursor: pointer;
    padding: 8px;
    border-radius: 8px;
    transition: background-color 0.2s ease;
}

.close-btn:hover {
    background: #F3F4F6;
}

.form-group {
    margin-bottom: 24px;
}

.form-label {
    display: block;
    font-weight: 500;
    color: #1F2937;
    margin-bottom: 8px;
}

.form-input, .form-textarea {
    width: 100%;
    padding: 16px;
    border: 1px solid #E5E7EB;
    border-radius: 8px;
    font-size: 16px;
    transition: border-color 0.2s ease;
}

.form-input:focus, .form-textarea:focus {
    outline: none;
    border-color: #FF6B35;
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
}

.form-input:disabled, .form-textarea:disabled {
    background: #F3F4F6;
    color: #9CA3AF;
}

.form-textarea {
    resize: vertical;
    min-height: 80px;
}

.form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 32px;
}

.cancel-btn {
    background: transparent;
    color: #6B7280;
    border: 1px solid #E5E7EB;
    padding: 16px 24px;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.cancel-btn:hover:not(:disabled) {
    background: #F3F4F6;
    border-color: #D1D5DB;
}

.cancel-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.submit-btn {
    background: #FF6B35;
    color: white;
    border: none;
    padding: 16px 24px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
}

.submit-btn:hover:not(:disabled) {
    background: #E55A2E;
}

.submit-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.validation-error {
    color: #EF4444;
    font-size: 14px;
    margin-top: 8px;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .nav-container {
        padding: 0 16px;
    }

    .nav-links {
        display: none;
    }

    .dashboard-content {
        padding: 24px 16px;
    }

    .page-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
    }

    .patients-grid {
        grid-template-columns: 1fr;
        gap: 16px;
    }

    .filter-tabs {
        width: 100%;
        justify-content: center;
    }

    .modal-content {
        padding: 24px;
        margin: 16px;
    }

    .form-actions {
        flex-direction: column;
    }

    .cancel-btn, .submit-btn {
        width: 100%;
    }
}
</style>

@code {
    private List<PatientData> _patients = new();
    private List<PatientData> _filteredPatients = new();
    private string _currentFilter = "all";
    private bool _isLoading = true;
    private bool _showInviteModal = false;
    private bool _isSending = false;
    private readonly InviteModel _inviteModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
        _isLoading = false;
    }

    private async Task LoadPatients()
    {
        try
        {
            // Simulate loading delay
            await Task.Delay(1000);

            // Mock patient data
            _patients = new List<PatientData>
            {
                new()
                {
                    Id = 1,
                    Name = "Sarah Miller",
                    LastActiveText = "2 days ago",
                    Level = 3,
                    StreakDays = 12,
                    ProgressPercentage = 75,
                    AvatarUrl = null
                },
                new()
                {
                    Id = 2,
                    Name = "David Lee",
                    LastActiveText = "1 week ago",
                    Level = 3,
                    StreakDays = 0,
                    ProgressPercentage = 45,
                    AvatarUrl = null
                },
                new()
                {
                    Id = 3,
                    Name = "Emily Chen",
                    LastActiveText = "3 days ago",
                    Level = 4,
                    StreakDays = 8,
                    ProgressPercentage = 88,
                    AvatarUrl = null
                }
            };

            ApplyFilter();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load patients", Severity.Error);
        }
    }

    private void SetFilter(string filter)
    {
        _currentFilter = filter;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        _filteredPatients = _currentFilter switch
        {
            "active" => _patients.Where(p => p.ProgressPercentage > 70).ToList(),
            "needs-nudge" => _patients.Where(p => p.StreakDays == 0 || p.ProgressPercentage < 50).ToList(),
            _ => _patients.ToList()
        };
    }

    private void ViewPatient(int patientId)
    {
        Navigation.NavigateTo($"/patient/{patientId}");
    }

    private void ShowInviteModal()
    {
        _showInviteModal = true;
        _inviteModel.Email = "";
        _inviteModel.Message = "";
    }

    private void CloseInviteModal()
    {
        _showInviteModal = false;
    }

    private async Task SendInvite()
    {
        if (string.IsNullOrWhiteSpace(_inviteModel.Email))
            return;

        _isSending = true;

        try
        {
            // TODO: Send invite via API
            await Task.Delay(2000); // Simulate API call

            Snackbar.Add($"Invite sent to {_inviteModel.Email}!", Severity.Success);
            CloseInviteModal();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to send invite. Please try again.", Severity.Error);
        }
        finally
        {
            _isSending = false;
        }
    }

    private string GetInitials()
    {
        if (string.IsNullOrEmpty(AuthState.FullName))
            return "TR";

        var parts = AuthState.FullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
    }

    private string GetPatientInitials(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "P";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
    }

    public class PatientData
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string LastActiveText { get; set; } = "";
        public int Level { get; set; }
        public int StreakDays { get; set; }
        public int ProgressPercentage { get; set; }
        public string? AvatarUrl { get; set; }

        // Compatibility properties for existing components
        public string DisplayName => Name;
        public string Alias => Name;
        public int AdherencePercent => ProgressPercentage;
        public DateTime LastActivity => DateTime.Now.AddDays(-1); // Mock for compatibility
        public bool SharesSummary => true; // Mock for compatibility
    }

    public class InviteModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        public string Message { get; set; } = "";
    }
}
@page "/trainer/dashboard"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Trainer Dashboard - Adaplio</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-8">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @errorMessage
        </MudAlert>
    }

    <MudGrid>
        <!-- Create Grant Card -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-2" />
                            Invite New Client
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                        Create an invitation link to connect with a new client. The link will expire after 24 hours.
                    </MudText>

                    @if (!string.IsNullOrEmpty(generatedGrantUrl))
                    {
                        <MudAlert Severity="Severity.Success" Class="mb-4">
                            <MudText Typo="Typo.body2" Class="mb-2">
                                <strong>Invitation created successfully!</strong>
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mb-2">
                                Grant Code: <strong>@generatedGrantCode</strong>
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mb-2">
                                Expires: @generatedExpiresAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                            </MudText>
                        </MudAlert>

                        <MudTextField @bind-Value="generatedGrantUrl"
                                      Label="Invitation URL"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                                      OnAdornmentClick="CopyToClipboard"
                                      AdornmentAriaLabel="Copy URL" />
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="CreateGrant"
                               Disabled="@isCreatingGrant"
                               StartIcon="@Icons.Material.Filled.Add">
                        @if (isCreatingGrant)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-3">Creating...</MudText>
                        }
                        else
                        {
                            <MudText>Create Invitation</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <!-- Active Clients Card -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Group" Class="mr-2" />
                            Active Clients (@clients.Count)
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       Color="Color.Default"
                                       OnClick="LoadClients"
                                       Disabled="@isLoadingClients" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Style="max-height: 400px; overflow-y: auto;">
                    @if (isLoadingClients)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Indeterminate="true" />
                        </div>
                    }
                    else if (!clients.Any())
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-4">
                            No clients connected yet. Create an invitation to get started!
                        </MudText>
                    }
                    else
                    {
                        <MudList T="string">
                            @foreach (var client in clients)
                            {
                                <MudListItem T="string">
                                    <div class="d-flex justify-space-between align-center w-100">
                                        <div>
                                            <MudText Typo="Typo.subtitle1">@client.ClientAlias</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                Connected: @client.GrantedAt.ToString("MMM dd, yyyy")
                                            </MudText>
                                            <MudChipSet T="string">
                                                @foreach (var scope in client.Scopes)
                                                {
                                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">@scope</MudChip>
                                                }
                                            </MudChipSet>
                                        </div>
                                        <div class="text-right">
                                            <MudText Typo="Typo.body2">
                                                Adherence: @client.AdherencePct.ToString("F1")%
                                            </MudText>
                                            @if (client.LastActivity.HasValue)
                                            {
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    Last active: @client.LastActivity.Value.ToString("MMM dd")
                                                </MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    No activity yet
                                                </MudText>
                                            }
                                        </div>
                                    </div>
                                </MudListItem>
                                @if (client != clients.Last())
                                {
                                    <MudDivider />
                                }
                            }
                        </MudList>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Quick Stats -->
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="12" sm="3">
                    <MudCard>
                        <MudCardContent Class="text-center">
                            <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Large" Color="Color.Primary" />
                            <MudText Typo="Typo.h4">@clients.Count</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Total Clients</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudCard>
                        <MudCardContent Class="text-center">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Color="Color.Success" />
                            <MudText Typo="Typo.h4">
                                @(clients.Any() ? clients.Average(c => c.AdherencePct).ToString("F1") : "0.0")%
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Avg Adherence</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudCard>
                        <MudCardContent Class="text-center">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Large" Color="Color.Info" />
                            <MudText Typo="Typo.h4">
                                @clients.Count(c => c.LastActivity.HasValue && c.LastActivity.Value > DateTimeOffset.Now.AddDays(-7))
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Active This Week</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudCard>
                        <MudCardContent Class="text-center">
                            <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Warning" />
                            <MudText Typo="Typo.h4">0</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Active Plans</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<ClientInfo> clients = new();
    private bool isLoadingClients = false;
    private bool isCreatingGrant = false;
    private string errorMessage = "";

    private string generatedGrantCode = "";
    private string generatedGrantUrl = "";
    private DateTimeOffset generatedExpiresAt;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthAndRedirect();
        await LoadClients();
    }

    private async Task CheckAuthAndRedirect()
    {
        try
        {
            var response = await HttpClient.GetAsync("/auth/me");
            if (!response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/auth/trainer/login");
                return;
            }

            var userInfo = await response.Content.ReadFromJsonAsync<JsonElement>();
            if (userInfo.GetProperty("userType").GetString() != "trainer")
            {
                NavigationManager.NavigateTo("/auth/trainer/login");
            }
        }
        catch
        {
            NavigationManager.NavigateTo("/auth/trainer/login");
        }
    }

    private async Task LoadClients()
    {
        isLoadingClients = true;
        errorMessage = "";

        try
        {
            var response = await HttpClient.GetAsync("/api/trainer/clients");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ClientsResponse>();
                clients = result?.Clients?.Select(c => new ClientInfo
                {
                    ClientAlias = c.ClientAlias,
                    Scopes = c.Scopes,
                    AdherencePct = c.AdherencePct,
                    LastActivity = c.LastActivity,
                    GrantedAt = c.GrantedAt
                }).ToList() ?? new List<ClientInfo>();
            }
            else
            {
                errorMessage = "Failed to load clients.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Network error while loading clients.";
        }
        finally
        {
            isLoadingClients = false;
        }
    }

    private async Task CreateGrant()
    {
        isCreatingGrant = true;
        errorMessage = "";
        generatedGrantCode = "";
        generatedGrantUrl = "";

        try
        {
            var response = await HttpClient.PostAsJsonAsync("/api/trainer/grants", new { });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<GrantResponse>();
                if (result != null)
                {
                    generatedGrantCode = result.GrantCode;
                    generatedGrantUrl = result.Url;
                    generatedExpiresAt = result.ExpiresAt;
                    Snackbar.Add("Invitation created successfully!", Severity.Success);
                }
            }
            else
            {
                errorMessage = "Failed to create invitation. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Network error while creating invitation.";
        }
        finally
        {
            isCreatingGrant = false;
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedGrantUrl);
            Snackbar.Add("URL copied to clipboard!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Failed to copy URL. Please copy manually.", Severity.Warning);
        }
    }

    public class ClientInfo
    {
        public string ClientAlias { get; set; } = "";
        public string[] Scopes { get; set; } = Array.Empty<string>();
        public decimal AdherencePct { get; set; }
        public DateTimeOffset? LastActivity { get; set; }
        public DateTimeOffset GrantedAt { get; set; }
    }

    public class ClientsResponse
    {
        public ClientInfo[] Clients { get; set; } = Array.Empty<ClientInfo>();
    }

    public class GrantResponse
    {
        public string GrantCode { get; set; } = "";
        public string Url { get; set; } = "";
        public DateTimeOffset ExpiresAt { get; set; }
    }
}
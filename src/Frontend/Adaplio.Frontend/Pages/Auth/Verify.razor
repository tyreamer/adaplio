@page "/auth/verify"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Linq
@using Adaplio.Frontend.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthStateService AuthState

<PageTitle>Check your email - Adaplio</PageTitle>

@if (_isCheckingAuth)
{
    return;
}

<div class="verify-page">
    <!-- Header -->
    <div class="verify-header">
        <div class="brand-logo">
            <span class="logo-icon">ðŸ§¡</span>
            <span class="brand-name">Adaplio</span>
        </div>
    </div>

    <!-- Verification Content -->
    <div class="verify-container">
        <div class="verify-form">
            <div class="form-header">
                <h1 class="form-title">Enter your code</h1>
                <p class="form-subtitle">We've sent a 6-digit code to your email. Enter it below to sign in.</p>
            </div>

            <!-- Email Icon -->
            <div class="email-icon-container">
                <div class="email-icon">
                    <div class="pulse-animation">
                        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="#FF6B35" stroke-width="2">
                            <path d="M12 6V2H8l4 4 4-4v4"/>
                            <path d="M12 18v4l4-4-4-4-4 4v4"/>
                            <path d="M6 12H2l4-4v8"/>
                            <path d="M18 12h4l-4-4v8"/>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Code Entry -->
            <div class="code-entry-section">
                    <EditForm Model="@_model" OnValidSubmit="@VerifyCode" class="code-form">
                        <DataAnnotationsValidator />

                        <div class="code-input-container">
                            <input type="text"
                                   @bind="_model.Code"
                                   class="code-input @(_validationErrors.ContainsKey("Code") ? "error" : "")"
                                   disabled="@_isLoading"
                                   placeholder="123456"
                                   maxlength="6" />
                            @if (_validationErrors.ContainsKey("Code"))
                            {
                                <div class="field-error">@_validationErrors["Code"]</div>
                            }
                        </div>

                        <button type="submit"
                                class="verify-btn @(_isLoading ? "loading" : "")"
                                disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <span class="loading-spinner"></span>
                                <text>Verifying...</text>
                            }
                            else
                            {
                                <text>Verify Code</text>
                            }
                        </button>
                    </EditForm>
                </div>

            <!-- Resend Options -->
            <div class="resend-section">
                <p class="resend-text">Didn't receive the code?</p>
                <div class="resend-actions">
                    <button class="resend-btn" @onclick="ResendCode" disabled="@_resendLoading">
                        @if (_resendLoading)
                        {
                            <span class="loading-spinner small"></span>
                        }
                        Resend code
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly VerifyModel _model = new();
    private bool _isLoading = false;
    private bool _showCodeEntry = true; // Always show code entry by default
    private bool _resendLoading = false;
    private bool _isCheckingAuth = true;
    private readonly Dictionary<string, string> _validationErrors = new();
    private string? _email;
    private string? _returnUrl;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        await AuthState.InitializeAsync();

        if (AuthState.IsAuthenticated)
        {
            // User is already logged in, redirect to their dashboard
            if (AuthState.IsClient)
            {
                Navigation.NavigateTo("/home/client", replace: true);
            }
            else if (AuthState.IsTrainer)
            {
                Navigation.NavigateTo("/home/trainer", replace: true);
            }
            return;
        }

        _isCheckingAuth = false;

        // Get email and returnUrl from query parameters
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        _email = query["email"];
        _returnUrl = query["returnUrl"];
    }

    private async Task VerifyCode()
    {
        _validationErrors.Clear();

        // Validate code
        if (string.IsNullOrWhiteSpace(_model.Code))
            _validationErrors["Code"] = "Code is required";
        else if (_model.Code.Length != 6 || !_model.Code.All(char.IsDigit))
            _validationErrors["Code"] = "Code must be 6 digits";

        if (_validationErrors.Any())
        {
            StateHasChanged();
            return;
        }

        _isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("/auth/client/verify", _model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuthResponse>();

                // Update auth state
                if (result != null)
                {
                    var userInfo = new UserInfo
                    {
                        UserId = result.UserId ?? "",
                        Email = "", // Will be fetched if needed
                        UserType = result.UserType ?? "",
                        Alias = result.Alias,
                        DisplayName = result.DisplayName
                    };
                    await AuthState.SetUserAsync(userInfo, result.Token);

                    // Client login - redirect to returnUrl or dashboard
                    var welcomeMessage = !string.IsNullOrWhiteSpace(result.DisplayName)
                        ? $"Welcome {result.DisplayName}!"
                        : "Welcome!";
                    Snackbar.Add(welcomeMessage, Severity.Success);

                    var destination = !string.IsNullOrEmpty(_returnUrl) ? _returnUrl : "/home/client";
                    Navigation.NavigateTo(destination, replace: true);
                }
                else
                {
                    Snackbar.Add("Welcome to Adaplio!", Severity.Success);
                    var destination = !string.IsNullOrEmpty(_returnUrl) ? _returnUrl : "/home/client";
                    Navigation.NavigateTo(destination, replace: true);
                }
            }
            else
            {
                _validationErrors["Code"] = "Invalid or expired code. Please try again.";
            }
        }
        catch (Exception)
        {
            _validationErrors["Code"] = "Network error. Please check your connection.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ResendCode()
    {
        if (string.IsNullOrEmpty(_email))
        {
            Snackbar.Add("Email address not found. Please start over.", Severity.Error);
            Navigation.NavigateTo("/auth/client/login");
            return;
        }

        _resendLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("/auth/client/magic-link", new { Email = _email });

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("New code sent! Check your email.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to resend code. Please try again.", Severity.Error);
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Network error. Please check your connection.", Severity.Error);
        }
        finally
        {
            _resendLoading = false;
            StateHasChanged();
        }
    }

    public class VerifyModel
    {
        [Required(ErrorMessage = "Code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be exactly 6 digits")]
        [RegularExpression(@"^\d{6}$", ErrorMessage = "Code must be 6 digits")]
        public string Code { get; set; } = "";
    }

    public class AuthResponse
    {
        public string Message { get; set; } = "";
        public string? UserType { get; set; }
        public string? UserId { get; set; }
        public string? Alias { get; set; }
        public string? DisplayName { get; set; }
        public string? Token { get; set; }
    }
}

<style>
.verify-page {
    min-height: 100vh;
    background: #F9F7F4; /* Cream background */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

/* Header */
.verify-header {
    padding: 20px 24px;
    background: #F9F7F4;
}

.brand-logo {
    display: flex;
    align-items: center;
}

.logo-icon {
    font-size: 24px;
    margin-right: 8px;
}

.brand-name {
    font-size: 24px;
    font-weight: 600;
    color: #1F2937; /* Navy */
}

/* Main Container */
.verify-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 80px);
    padding: 40px 24px;
}

.verify-form {
    width: 100%;
    max-width: 480px;
    background: white;
    border-radius: 16px;
    padding: 40px 32px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.06);
    text-align: center;
}

/* Form Header */
.form-header {
    margin-bottom: 40px;
}

.form-title {
    font-size: 32px;
    font-weight: 700;
    color: #1F2937; /* Navy */
    line-height: 1.2;
    margin: 0 0 16px 0;
}

.form-subtitle {
    font-size: 16px;
    color: #6B7280; /* Gray */
    line-height: 1.5;
    margin: 0;
}

/* Email Icon */
.email-icon-container {
    margin: 40px 0;
    display: flex;
    justify-content: center;
}

.email-icon {
    width: 80px;
    height: 80px;
    background: rgba(255, 107, 53, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.pulse-animation {
    animation: pulse 2s ease-in-out infinite;
}

@@keyframes pulse {
    0%, 100% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.1);
        opacity: 0.8;
    }
}

/* Waiting Status */
.waiting-status {
    margin-bottom: 40px;
}

.waiting-title {
    font-size: 20px;
    font-weight: 600;
    color: #1F2937; /* Navy */
    margin: 0 0 8px 0;
}

.waiting-subtitle {
    font-size: 14px;
    color: #6B7280; /* Gray */
    margin: 0;
    line-height: 1.5;
}

/* Code Entry Section */
.code-entry-section {
    margin: 32px 0;
    padding: 24px;
    background: #F8FAFC;
    border: 1px solid #E2E8F0;
    border-radius: 12px;
}

.code-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.code-input-container {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.code-input {
    width: 200px;
    padding: 16px 20px;
    border: 2px solid #E5E7EB;
    border-radius: 12px;
    font-size: 24px;
    font-weight: 600;
    background: white;
    color: #1F2937;
    transition: border-color 0.2s ease;
    outline: none;
    text-align: center;
    letter-spacing: 4px;
}

.code-input::placeholder {
    color: #9CA3AF;
    font-weight: 400;
}

.code-input:focus {
    border-color: #FF6B35; /* Orange focus */
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
}

.code-input.error {
    border-color: #EF4444; /* Red error */
}

.code-input:disabled {
    background-color: #F3F4F6;
    color: #9CA3AF;
    cursor: not-allowed;
}

.field-error {
    font-size: 14px;
    color: #EF4444; /* Red */
    margin-top: 8px;
    text-align: center;
}

/* Verify Button */
.verify-btn {
    padding: 16px 32px;
    background: #FF6B35; /* Orange */
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    margin: 0 auto;
    min-width: 160px;
}

.verify-btn:hover:not(:disabled) {
    background: #E55A2E;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
}

.verify-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Resend Section */
.resend-section {
    margin-top: 40px;
    padding-top: 32px;
    border-top: 1px solid #E5E7EB;
}

.resend-text {
    font-size: 14px;
    color: #6B7280;
    margin: 0 0 16px 0;
}

.resend-actions {
    display: flex;
    flex-direction: column;
    gap: 12px;
    align-items: center;
}

.enter-code-btn {
    padding: 12px 24px;
    background: transparent;
    color: #4F46E5; /* Indigo */
    border: 1px solid #E5E7EB;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.enter-code-btn:hover {
    background: #4F46E5;
    color: white;
    border-color: #4F46E5;
}

.resend-btn {
    padding: 12px 24px;
    background: transparent;
    color: #FF6B35; /* Orange */
    border: 1px solid #FF6B35;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
}

.resend-btn:hover:not(:disabled) {
    background: #FF6B35;
    color: white;
}

.resend-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

/* Loading Spinner */
.loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
}

.loading-spinner.small {
    width: 16px;
    height: 16px;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Responsive Design */
@@media (max-width: 640px) {
    .verify-container {
        padding: 20px 16px;
        min-height: calc(100vh - 60px);
    }

    .verify-form {
        padding: 32px 24px;
    }

    .form-title {
        font-size: 28px;
    }

    .code-input {
        width: 100%;
        max-width: 240px;
        font-size: 20px;
    }

    .resend-actions {
        gap: 16px;
    }

    .enter-code-btn,
    .resend-btn {
        width: 100%;
        max-width: 200px;
    }
}
</style>
@page "/auth/verify"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Adaplio.Frontend.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthStateService AuthState
@inject IDialogService DialogService

<PageTitle>Verify Code - Adaplio</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Class="pa-8">
        <div class="d-flex flex-column align-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.MarkEmailRead" Size="Size.Large" Color="Color.Primary" />
            <MudText Typo="Typo.h4" Class="mt-2">Enter Your Code</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                We sent a 6-digit code to your email. Enter it below to complete your sign in.
            </MudText>
        </div>

        <EditForm Model="@_model" OnValidSubmit="@VerifyCode">
            <DataAnnotationsValidator />

            <MudStack Spacing="4">
                <MudTextField @bind-Value="_model.Code"
                              For="@(() => _model.Code)"
                              Label="6-Digit Code"
                              Variant="Variant.Outlined"
                              InputType="InputType.Text"
                              Disabled="@_isLoading"
                              Placeholder="123456"
                              Class="text-center"
                              Style="font-size: 1.5rem; letter-spacing: 0.5rem;" />

                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <text>Verifying...</text>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-2" />
                        <text>Verify & Sign In</text>
                    }
                </MudButton>
            </MudStack>
        </EditForm>

        <MudDivider Class="my-6" />

        <div class="text-center">
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                Didn't receive a code?
            </MudText>
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Href="/auth/client/login">
                Request New Code
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private readonly VerifyModel _model = new();
    private bool _isLoading = false;

    private async Task VerifyCode()
    {
        _isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("/auth/client/verify", _model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuthResponse>();

                // Update auth state
                if (result != null)
                {
                    var userInfo = new UserInfo
                    {
                        UserId = result.UserId ?? "",
                        Email = "", // Will be fetched if needed
                        UserType = result.UserType ?? "",
                        Alias = result.Alias
                    };
                    await AuthState.SetUserAsync(userInfo, result.Token);

                    // Check if user needs to select a role
                    if (string.IsNullOrEmpty(result.UserType))
                    {
                        await ShowRoleSelectionDialog();
                    }
                    else
                    {
                        Snackbar.Add($"Welcome {result.Alias ?? "to Adaplio"}!", Severity.Success);
                        Navigation.NavigateTo("/home");
                    }
                }
                else
                {
                    Snackbar.Add("Welcome to Adaplio!", Severity.Success);
                    Navigation.NavigateTo("/home");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Invalid or expired code. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Network error. Please check your connection.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ShowRoleSelectionDialog()
    {
        // Get preferred role hint if available
        var preferredRole = await AuthState.GetPreferredRoleAsync();

        var parameters = new DialogParameters<Shared.RoleSelectionDialog>
        {
            { x => x.PreferredRole, preferredRole }
        };

        var options = new DialogOptions
        {
            CloseButton = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<Shared.RoleSelectionDialog>("Choose Your Role", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string selectedRole)
        {
            // Role was successfully set, navigate to appropriate home
            Snackbar.Add($"Welcome! You're all set as a {selectedRole}.", Severity.Success);

            if (selectedRole == "client")
            {
                Navigation.NavigateTo("/home/client");
            }
            else
            {
                Navigation.NavigateTo("/home/trainer");
            }
        }
        else
        {
            // User canceled or error occurred, redirect to landing
            Navigation.NavigateTo("/");
        }
    }

    public class VerifyModel
    {
        [Required(ErrorMessage = "Code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be exactly 6 digits")]
        [RegularExpression(@"^\d{6}$", ErrorMessage = "Code must be 6 digits")]
        public string Code { get; set; } = "";
    }

    public class AuthResponse
    {
        public string Message { get; set; } = "";
        public string? UserType { get; set; }
        public string? UserId { get; set; }
        public string? Alias { get; set; }
        public string? Token { get; set; }
    }
}
@page "/auth/trainer/reset-password"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Reset Password - Adaplio</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Class="pa-8">
        <div class="d-flex flex-column align-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.VpnKey" Size="Size.Large" Color="Color.Primary" />
            <MudText Typo="Typo.h4" Class="mt-2">Reset Password</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center mt-2">
                Enter the 6-digit code sent to your email and choose a new password.
            </MudText>
        </div>

        <EditForm Model="@_model" OnValidSubmit="@SubmitPasswordReset">
            <DataAnnotationsValidator />

            <MudStack Spacing="4">
                <MudTextField @bind-Value="_model.Code"
                              For="@(() => _model.Code)"
                              Label="6-Digit Code"
                              Variant="Variant.Outlined"
                              InputType="InputType.Text"
                              Disabled="@_isLoading"
                              MaxLength="6"
                              HelperText="Enter the code from your email" />

                <MudTextField @bind-Value="_model.NewPassword"
                              For="@(() => _model.NewPassword)"
                              Label="New Password"
                              Variant="Variant.Outlined"
                              InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                              Disabled="@_isLoading"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                              OnAdornmentClick="TogglePasswordVisibility"
                              HelperText="At least 8 characters" />

                <MudTextField @bind-Value="_model.ConfirmPassword"
                              For="@(() => _model.ConfirmPassword)"
                              Label="Confirm New Password"
                              Variant="Variant.Outlined"
                              InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                              Disabled="@_isLoading"
                              HelperText="Re-enter your new password" />

                @if (!string.IsNullOrEmpty(_model.NewPassword))
                {
                    <MudAlert Severity="@GetPasswordStrengthSeverity()" Dense="true" Class="mt-2">
                        Password strength: @GetPasswordStrength()
                    </MudAlert>
                }

                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <text>Resetting Password...</text>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Class="mr-2" />
                        <text>Reset Password</text>
                    }
                </MudButton>
            </MudStack>
        </EditForm>

        <MudDivider Class="my-6" />

        <div class="text-center">
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                Didn't receive a code?
            </MudText>
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Href="/auth/trainer/forgot-password">
                Request New Code
            </MudButton>
        </div>

        <MudDivider Class="my-6" />

        <div class="text-center">
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                Remember your password?
            </MudText>
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Href="/auth/trainer/login">
                Back to Login
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private readonly ResetPasswordModel _model = new();
    private bool _isLoading = false;
    private bool _showPassword = false;

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private string GetPasswordStrength()
    {
        var password = _model.NewPassword;
        if (string.IsNullOrEmpty(password)) return "None";
        if (password.Length < 8) return "Too short";

        int strength = 0;
        if (password.Length >= 12) strength++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"[a-z]")) strength++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"[A-Z]")) strength++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"\d")) strength++;
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"[!@#$%^&*(),.?""':{}|<>]")) strength++;

        return strength switch
        {
            0 or 1 => "Weak",
            2 or 3 => "Medium",
            _ => "Strong"
        };
    }

    private Severity GetPasswordStrengthSeverity()
    {
        return GetPasswordStrength() switch
        {
            "Too short" or "Weak" => Severity.Error,
            "Medium" => Severity.Warning,
            "Strong" => Severity.Success,
            _ => Severity.Info
        };
    }

    private async Task SubmitPasswordReset()
    {
        _isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync("/auth/trainer/reset-password", new
            {
                Code = _model.Code,
                NewPassword = _model.NewPassword
            });

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Password reset successfully! Please log in with your new password.", Severity.Success);
                await Task.Delay(1500);
                Navigation.NavigateTo("/auth/trainer/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                if (error.Contains("Invalid or expired"))
                {
                    Snackbar.Add("Invalid or expired reset code. Please request a new one.", Severity.Error);
                }
                else if (error.Contains("Password must be"))
                {
                    Snackbar.Add("Password must be at least 8 characters long.", Severity.Error);
                }
                else
                {
                    Snackbar.Add("Failed to reset password. Please try again.", Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("An error occurred. Please try again later.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be 6 digits")]
        public string Code { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        public string NewPassword { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}

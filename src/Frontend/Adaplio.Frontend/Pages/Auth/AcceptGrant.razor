@page "/grant/{grantCode}"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Connect to Trainer - Adaplio</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="my-16 px-8">
    <MudPaper Class="pa-8" Elevation="25">
        <MudStack AlignItems="Center" Spacing="4">
            <MudIcon Icon="@Icons.Material.Filled.Link" Color="Color.Primary" Size="Size.Large" />
            <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">
                Connect to Your Trainer
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">
                You've been invited to connect with a physical therapist. Please log in to accept this invitation.
            </MudText>
        </MudStack>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="my-4">
                @errorMessage
            </MudAlert>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <MudAlert Severity="Severity.Success" Class="my-4">
                @successMessage
                <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="GoToDashboard" Class="ml-4">
                    Go to Dashboard
                </MudButton>
            </MudAlert>
        }

        @if (!isLoggedIn && string.IsNullOrEmpty(successMessage))
        {
            <MudDivider Class="my-6" />

            <MudText Typo="Typo.h6" GutterBottom="true">Sign in to continue</MudText>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <MudStack Spacing="3">
                    <MudTextField @bind-Value="loginModel.Email"
                                  For="@(() => loginModel.Email)"
                                  Label="Email Address"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email" />

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               FullWidth="true"
                               Class="mt-8"
                               Disabled="@isLoading">
                        @if (isLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-3">Sending login code...</MudText>
                        }
                        else
                        {
                            <MudText>Send Login Code</MudText>
                        }
                    </MudButton>
                </MudStack>
            </EditForm>

            @if (showVerifyForm)
            {
                <MudDivider Class="my-6" />

                <EditForm Model="@verifyModel" OnValidSubmit="HandleVerify">
                    <DataAnnotationsValidator />

                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="verifyModel.Code"
                                      For="@(() => verifyModel.Code)"
                                      Label="Verification Code"
                                      Variant="Variant.Outlined"
                                      HelperText="Enter the 6-digit code sent to your email" />

                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   FullWidth="true"
                                   Disabled="@isVerifying">
                            @if (isVerifying)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-3">Verifying...</MudText>
                            }
                            else
                            {
                                <MudText>Verify & Accept Invitation</MudText>
                            }
                        </MudButton>
                    </MudStack>
                </EditForm>
            }
        }
        else if (isLoggedIn && string.IsNullOrEmpty(successMessage))
        {
            <MudDivider Class="my-6" />

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       OnClick="AcceptGrant"
                       Disabled="@isAccepting">
                @if (isAccepting)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-3">Connecting...</MudText>
                }
                else
                {
                    <MudText>Accept Invitation</MudText>
                }
            </MudButton>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public string GrantCode { get; set; } = "";

    private LoginModel loginModel = new();
    private VerifyModel verifyModel = new();

    private bool isLoading = false;
    private bool isVerifying = false;
    private bool isAccepting = false;
    private bool isLoggedIn = false;
    private bool showVerifyForm = false;

    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        try
        {
            var response = await HttpClient.GetAsync("/auth/me");
            if (response.IsSuccessStatusCode)
            {
                var userInfo = await response.Content.ReadFromJsonAsync<JsonElement>();
                if (userInfo.GetProperty("userType").GetString() == "client")
                {
                    isLoggedIn = true;
                }
            }
        }
        catch
        {
            // User not logged in
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var response = await HttpClient.PostAsJsonAsync("/auth/client/magic-link", new { Email = loginModel.Email });

            if (response.IsSuccessStatusCode)
            {
                showVerifyForm = true;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = "Failed to send login code. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Network error. Please check your connection and try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleVerify()
    {
        isVerifying = true;
        errorMessage = "";

        try
        {
            var response = await HttpClient.PostAsJsonAsync("/auth/client/verify", new
            {
                Email = loginModel.Email,
                Code = verifyModel.Code
            });

            if (response.IsSuccessStatusCode)
            {
                isLoggedIn = true;
                showVerifyForm = false;

                // Automatically attempt to accept the grant
                await AcceptGrant();
            }
            else
            {
                errorMessage = "Invalid verification code. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Network error. Please check your connection and try again.";
        }
        finally
        {
            isVerifying = false;
        }
    }

    private async Task AcceptGrant()
    {
        isAccepting = true;
        errorMessage = "";

        try
        {
            var response = await HttpClient.PostAsJsonAsync("/api/client/grants/accept", new
            {
                GrantCode = GrantCode
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<JsonElement>();
                var trainerName = result.GetProperty("trainerName").GetString();
                successMessage = $"Successfully connected to {trainerName}! You can now start your physical therapy journey.";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var error = await response.Content.ReadAsStringAsync();
                if (error.Contains("Invalid or expired"))
                {
                    errorMessage = "This invitation link has expired or is invalid. Please contact your trainer for a new invitation.";
                }
                else if (error.Contains("already connected"))
                {
                    errorMessage = "You are already connected to this trainer.";
                }
                else
                {
                    errorMessage = "Unable to accept invitation. Please try again or contact your trainer.";
                }
            }
            else
            {
                errorMessage = "Failed to accept invitation. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Network error. Please check your connection and try again.";
        }
        finally
        {
            isAccepting = false;
        }
    }

    private void GoToDashboard()
    {
        NavigationManager.NavigateTo("/");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";
    }

    public class VerifyModel
    {
        [Required(ErrorMessage = "Verification code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be 6 digits")]
        public string Code { get; set; } = "";
    }
}
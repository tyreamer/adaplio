@page "/auth/trainer/register"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Adaplio.Frontend.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthStateService AuthState

<PageTitle>Create your Therapist account - Adaplio</PageTitle>

@if (_isCheckingAuth)
{
    return;
}

<div class="register-page">
    <!-- Header -->
    <div class="register-header">
        <div class="brand-logo">
            <span class="logo-icon">ðŸ§¡</span>
            <span class="brand-name">Adaplio</span>
        </div>
    </div>

    <!-- Registration Form -->
    <div class="register-container">
        <div class="register-form">
            <div class="form-header">
                <h1 class="form-title">Create your Therapist account</h1>
            </div>

            <EditForm Model="@_model" OnValidSubmit="@RegisterTrainer" class="form-content">
                <DataAnnotationsValidator />

                <div class="form-field">
                    <label class="field-label">Full Name</label>
                    <input type="text"
                           @bind="_model.FullName"
                           class="field-input @(_validationErrors.ContainsKey("FullName") ? "error" : "")"
                           disabled="@_isLoading"
                           placeholder="" />
                    @if (_validationErrors.ContainsKey("FullName"))
                    {
                        <div class="field-error">@_validationErrors["FullName"]</div>
                    }
                </div>

                <div class="form-field">
                    <label class="field-label">Practice Name</label>
                    <input type="text"
                           @bind="_model.PracticeName"
                           class="field-input @(_validationErrors.ContainsKey("PracticeName") ? "error" : "")"
                           disabled="@_isLoading"
                           placeholder="" />
                    @if (_validationErrors.ContainsKey("PracticeName"))
                    {
                        <div class="field-error">@_validationErrors["PracticeName"]</div>
                    }
                </div>

                <div class="form-field">
                    <label class="field-label">Email address</label>
                    <input type="email"
                           @bind="_model.Email"
                           class="field-input @(_validationErrors.ContainsKey("Email") ? "error" : "")"
                           disabled="@_isLoading"
                           placeholder="" />
                    @if (_validationErrors.ContainsKey("Email"))
                    {
                        <div class="field-error">@_validationErrors["Email"]</div>
                    }
                </div>

                <div class="form-field">
                    <label class="field-label">Password</label>
                    <div class="password-field">
                        <input type="@(_showPassword ? "text" : "password")"
                               @bind="_model.Password"
                               class="field-input password-input @(_validationErrors.ContainsKey("Password") ? "error" : "")"
                               disabled="@_isLoading"
                               placeholder="" />
                        <button type="button"
                                class="password-toggle"
                                @onclick="TogglePasswordVisibility"
                                disabled="@_isLoading">
                            @if (_showPassword)
                            {
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" stroke="currentColor" stroke-width="2" fill="none"/>
                                    <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2" fill="none"/>
                                </svg>
                            }
                            else
                            {
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="m1 1 22 22" stroke="currentColor" stroke-width="2"/>
                                    <path d="M6.71 6.71C4.89 8.21 3 10.5 3 12s3-7 10-7c1.29 0 2.48.22 3.58.58" stroke="currentColor" stroke-width="2" fill="none"/>
                                </svg>
                            }
                        </button>
                    </div>
                    @if (_validationErrors.ContainsKey("Password"))
                    {
                        <div class="field-error">@_validationErrors["Password"]</div>
                    }
                    else if (!string.IsNullOrEmpty(_model.Password))
                    {
                        <div class="password-strength">
                            <div class="strength-bar">
                                <div class="strength-fill @GetPasswordStrengthClass()"></div>
                            </div>
                            <span class="strength-text @GetPasswordStrengthClass()">@GetPasswordStrengthText()</span>
                        </div>
                    }
                </div>

                <div class="form-field">
                    <label class="field-label">Confirm Password</label>
                    <input type="password"
                           @bind="_model.ConfirmPassword"
                           class="field-input @(_validationErrors.ContainsKey("ConfirmPassword") ? "error" : "")"
                           disabled="@_isLoading"
                           placeholder="" />
                    @if (_validationErrors.ContainsKey("ConfirmPassword"))
                    {
                        <div class="field-error">@_validationErrors["ConfirmPassword"]</div>
                    }
                </div>

                <button type="submit"
                        class="submit-btn @(_isLoading ? "loading" : "")"
                        disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <span class="loading-spinner"></span>
                        <text>Creating account...</text>
                    }
                    else
                    {
                        <text>Sign Up</text>
                    }
                </button>
            </EditForm>

            @if (_showExistingAccountMessage)
            {
                <div class="existing-account-alert">
                    <div class="alert-content">
                        <h6>Account Already Exists</h6>
                        <p>You already have an account with this email address.</p>
                    </div>
                    <div class="alert-actions">
                        <button class="btn-primary" @onclick="@(() => Navigation.NavigateTo("/auth/trainer/login"))">
                            Sign In Instead
                        </button>
                        <button class="btn-secondary" @onclick="@(() => _showExistingAccountMessage = false)">
                            Try Different Email
                        </button>
                    </div>
                </div>
            }

            <div class="form-footer">
                <span class="footer-text">Already have an account?</span>
                <a href="/auth/trainer/login" class="footer-link">Sign In</a>
            </div>
        </div>
    </div>
</div>

<style>
.register-page {
    min-height: 100vh;
    background: #F9F7F4; /* Cream background */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

/* Header */
.register-header {
    padding: 20px 24px;
    background: #F9F7F4;
}

.brand-logo {
    display: flex;
    align-items: center;
}

.logo-icon {
    font-size: 24px;
    margin-right: 8px;
}

.brand-name {
    font-size: 24px;
    font-weight: 600;
    color: #1F2937; /* Navy */
}

/* Main Container */
.register-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 80px);
    padding: 40px 24px;
}

.register-form {
    width: 100%;
    max-width: 400px;
    background: white;
    border-radius: 16px;
    padding: 40px 32px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.06);
}

/* Form Header */
.form-header {
    text-align: center;
    margin-bottom: 32px;
}

.form-title {
    font-size: 28px;
    font-weight: 700;
    color: #1F2937; /* Navy */
    line-height: 1.2;
    margin: 0;
}

/* Form Content */
.form-content {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.form-field {
    display: flex;
    flex-direction: column;
}

.field-label {
    font-size: 16px;
    font-weight: 500;
    color: #1F2937; /* Navy */
    margin-bottom: 8px;
}

.field-input {
    padding: 12px 16px;
    border: 2px solid #E5E7EB;
    border-radius: 8px;
    font-size: 16px;
    background: white;
    color: #1F2937;
    transition: border-color 0.2s ease;
    outline: none;
}

.field-input:focus {
    border-color: #FF6B35; /* Orange focus */
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
}

.field-input.error {
    border-color: #EF4444; /* Red error */
}

.field-input:disabled {
    background-color: #F3F4F6;
    color: #9CA3AF;
    cursor: not-allowed;
}

.field-error {
    font-size: 14px;
    color: #EF4444; /* Red */
    margin-top: 4px;
}

/* Password Field */
.password-field {
    position: relative;
}

.password-input {
    padding-right: 48px;
}

.password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #6B7280;
    cursor: pointer;
    padding: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.password-toggle:hover {
    color: #1F2937;
}

.password-toggle:disabled {
    cursor: not-allowed;
    opacity: 0.5;
}

/* Password Strength */
.password-strength {
    margin-top: 8px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.strength-bar {
    flex: 1;
    height: 4px;
    background: #E5E7EB;
    border-radius: 2px;
    overflow: hidden;
}

.strength-fill {
    height: 100%;
    border-radius: 2px;
    transition: width 0.3s ease;
}

.strength-fill.weak {
    width: 33%;
    background: #EF4444; /* Red */
}

.strength-fill.medium {
    width: 66%;
    background: #F59E0B; /* Yellow */
}

.strength-fill.strong {
    width: 100%;
    background: #10B981; /* Green */
}

.strength-text {
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.strength-text.weak {
    color: #EF4444;
}

.strength-text.medium {
    color: #F59E0B;
}

.strength-text.strong {
    color: #10B981;
}

/* Submit Button */
.submit-btn {
    padding: 16px 24px;
    background: #FF6B35; /* Orange */
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    margin-top: 8px;
}

.submit-btn:hover:not(:disabled) {
    background: #E55A2E;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
}

.submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Existing Account Alert */
.existing-account-alert {
    margin-top: 24px;
    padding: 16px;
    background: #EBF8FF;
    border: 1px solid #60A5FA;
    border-radius: 8px;
}

.alert-content h6 {
    font-size: 16px;
    font-weight: 600;
    color: #1E40AF;
    margin: 0 0 4px 0;
}

.alert-content p {
    font-size: 14px;
    color: #1E40AF;
    margin: 0 0 12px 0;
}

.alert-actions {
    display: flex;
    gap: 8px;
}

.btn-primary {
    padding: 8px 16px;
    background: #FF6B35;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
}

.btn-secondary {
    padding: 8px 16px;
    background: transparent;
    color: #6B7280;
    border: 1px solid #D1D5DB;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
}

/* Form Footer */
.form-footer {
    margin-top: 32px;
    text-align: center;
    padding-top: 24px;
    border-top: 1px solid #E5E7EB;
}

.footer-text {
    font-size: 14px;
    color: #6B7280;
}

.footer-link {
    font-size: 14px;
    color: #FF6B35; /* Orange */
    text-decoration: none;
    font-weight: 500;
    margin-left: 4px;
}

.footer-link:hover {
    text-decoration: underline;
}

/* Responsive Design */
@@media (max-width: 640px) {
    .register-container {
        padding: 20px 16px;
        min-height: calc(100vh - 60px);
    }

    .register-form {
        padding: 32px 24px;
    }

    .form-title {
        font-size: 24px;
    }

    .field-input {
        font-size: 16px; /* Prevent zoom on iOS */
    }

    .alert-actions {
        flex-direction: column;
    }
}
</style>

@code {
    private readonly RegisterModel _model = new();
    private bool _isLoading = false;
    private bool _showExistingAccountMessage = false;
    private bool _showPassword = false;
    private bool _isCheckingAuth = true;
    private readonly Dictionary<string, string> _validationErrors = new();

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        await AuthState.InitializeAsync();

        if (AuthState.IsAuthenticated)
        {
            // User is already logged in, redirect to their dashboard
            if (AuthState.IsClient)
            {
                Navigation.NavigateTo("/home/client", replace: true);
            }
            else if (AuthState.IsTrainer)
            {
                Navigation.NavigateTo("/home/trainer", replace: true);
            }
            return;
        }

        _isCheckingAuth = false;
    }

    private async Task RegisterTrainer()
    {
        _validationErrors.Clear();

        // Validate required fields
        if (string.IsNullOrWhiteSpace(_model.FullName))
            _validationErrors["FullName"] = "Full name is required";

        if (string.IsNullOrWhiteSpace(_model.PracticeName))
            _validationErrors["PracticeName"] = "Practice name is required";

        if (string.IsNullOrWhiteSpace(_model.Email))
            _validationErrors["Email"] = "Email address is required";
        else if (!IsValidEmail(_model.Email))
            _validationErrors["Email"] = "Please enter a valid email address";

        if (string.IsNullOrWhiteSpace(_model.Password))
            _validationErrors["Password"] = "Password is required";
        else if (_model.Password.Length < 8)
            _validationErrors["Password"] = "Password must be at least 8 characters long";

        if (string.IsNullOrWhiteSpace(_model.ConfirmPassword))
            _validationErrors["ConfirmPassword"] = "Please confirm your password";
        else if (_model.Password != _model.ConfirmPassword)
            _validationErrors["ConfirmPassword"] = "Passwords do not match";

        if (_validationErrors.Any())
        {
            StateHasChanged();
            return;
        }

        _isLoading = true;
        try
        {
            var request = new
            {
                Email = _model.Email.Trim(),
                Password = _model.Password,
                FullName = _model.FullName?.Trim(),
                PracticeName = _model.PracticeName?.Trim()
            };

            var response = await Http.PostAsJsonAsync("/auth/trainer/register", request);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Account created successfully! You can now sign in.", Severity.Success);
                Navigation.NavigateTo("/auth/trainer/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();

                try
                {
                    var errorResponse = System.Text.Json.JsonSerializer.Deserialize<AuthErrorResponse>(errorContent);
                    var message = errorResponse?.Message ?? "";

                    if (message.Contains("Email already registered", StringComparison.OrdinalIgnoreCase))
                    {
                        _showExistingAccountMessage = true;
                        StateHasChanged();
                        return;
                    }
                }
                catch
                {
                    // JSON parsing failed
                }

                Snackbar.Add("Registration failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Network error. Please check your connection.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private string GetPasswordStrengthClass()
    {
        var strength = GetPasswordStrength(_model.Password);
        return strength switch
        {
            1 => "weak",
            2 => "medium",
            3 => "strong",
            _ => ""
        };
    }

    private string GetPasswordStrengthText()
    {
        var strength = GetPasswordStrength(_model.Password);
        return strength switch
        {
            1 => "Weak",
            2 => "Medium",
            3 => "Strong",
            _ => ""
        };
    }

    private int GetPasswordStrength(string password)
    {
        if (string.IsNullOrEmpty(password)) return 0;

        int score = 0;
        if (password.Length >= 8) score++;
        if (password.Any(char.IsDigit)) score++;
        if (password.Any(c => char.IsLetter(c) && char.IsUpper(c)) &&
            password.Any(c => char.IsLetter(c) && char.IsLower(c))) score++;

        return Math.Min(score, 3);
    }

    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    public class RegisterModel
    {
        public string FullName { get; set; } = "";
        public string PracticeName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }

    public class AuthErrorResponse
    {
        public string Message { get; set; } = "";
    }
}
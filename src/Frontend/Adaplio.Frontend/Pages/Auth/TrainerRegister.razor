@page "/auth/trainer/register"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Trainer Registration - Adaplio</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Class="pa-8">
        <div class="d-flex flex-column align-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Size="Size.Large" Color="Color.Primary" />
            <MudText Typo="Typo.h4" Class="mt-2">Create Trainer Account</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Join Adaplio to help your clients stay motivated with their therapy
            </MudText>
        </div>

        <EditForm Model="@_model" OnValidSubmit="@RegisterTrainer">
            <DataAnnotationsValidator />

            <MudStack Spacing="4">
                <MudTextField @bind-Value="_model.Email"
                              For="@(() => _model.Email)"
                              Label="Email Address"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Disabled="@_isLoading" />

                <MudTextField @bind-Value="_model.Password"
                              For="@(() => _model.Password)"
                              Label="Password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Disabled="@_isLoading" />

                <MudTextField @bind-Value="_model.ConfirmPassword"
                              For="@(() => _model.ConfirmPassword)"
                              Label="Confirm Password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Disabled="@_isLoading" />

                <MudTextField @bind-Value="_model.FullName"
                              For="@(() => _model.FullName)"
                              Label="Full Name (Optional)"
                              Variant="Variant.Outlined"
                              Disabled="@_isLoading" />

                <MudTextField @bind-Value="_model.PracticeName"
                              For="@(() => _model.PracticeName)"
                              Label="Practice Name (Optional)"
                              Variant="Variant.Outlined"
                              Disabled="@_isLoading" />

                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <text>Creating account...</text>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-2" />
                        <text>Create Account</text>
                    }
                </MudButton>
            </MudStack>
        </EditForm>

        <MudDivider Class="my-6" />

        <div class="text-center">
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                Already have an account?
            </MudText>
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Href="/auth/trainer/login">
                Sign In
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private readonly RegisterModel _model = new();
    private bool _isLoading = false;

    private async Task RegisterTrainer()
    {
        _isLoading = true;
        try
        {
            var request = new
            {
                Email = _model.Email,
                Password = _model.Password,
                FullName = string.IsNullOrWhiteSpace(_model.FullName) ? null : _model.FullName,
                PracticeName = string.IsNullOrWhiteSpace(_model.PracticeName) ? null : _model.PracticeName
            };

            var response = await Http.PostAsJsonAsync("/auth/trainer/register", request);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Account created successfully! You can now sign in.", Severity.Success);
                Navigation.NavigateTo("/auth/trainer/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Registration failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Network error. Please check your connection.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    public class RegisterModel : IValidatableObject
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters long")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = "";

        [StringLength(200, ErrorMessage = "Full name cannot exceed 200 characters")]
        public string? FullName { get; set; }

        [StringLength(200, ErrorMessage = "Practice name cannot exceed 200 characters")]
        public string? PracticeName { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Password != ConfirmPassword)
            {
                yield return new ValidationResult("Passwords do not match", new[] { nameof(ConfirmPassword) });
            }
        }
    }
}
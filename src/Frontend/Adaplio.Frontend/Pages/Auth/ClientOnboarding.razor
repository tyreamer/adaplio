@page "/client/onboarding"
@page "/scan"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Adaplio.Frontend.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthStateService AuthState

<PageTitle>Scan your code - Adaplio</PageTitle>

<div class="onboarding-page">
    <!-- Header -->
    <div class="onboarding-header">
        <div class="brand-logo">
            <span class="logo-icon">ðŸ§¡</span>
            <span class="brand-name">Adaplio</span>
        </div>
        <button class="help-btn">Help</button>
    </div>

    <!-- Main Content -->
    <div class="onboarding-container">
        <div class="onboarding-content">
            <!-- Title Section -->
            <div class="title-section">
                <h1 class="main-title">Scan your code</h1>
                <p class="subtitle">Your physical therapist will give you a code to get started.</p>
            </div>

            <!-- QR Code Scanner Section -->
            <div class="qr-section">
                <div class="qr-scanner-container">
                    <div class="qr-scanner">
                        <!-- QR Code Icon/Scanner Placeholder -->
                        <div class="qr-icon">
                            <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="#6B7280" stroke-width="1.5">
                                <rect x="3" y="3" width="5" height="5" fill="#6B7280"/>
                                <rect x="3" y="16" width="5" height="5" fill="#6B7280"/>
                                <rect x="16" y="3" width="5" height="5" fill="#6B7280"/>
                                <path d="M21 16h-3a2 2 0 0 0-2 2v3"/>
                                <path d="M21 21v.01"/>
                                <path d="M12 7v3a2 2 0 0 1-2 2H7"/>
                                <path d="M3 12h.01"/>
                                <path d="M12 3h.01"/>
                                <path d="M12 16v.01"/>
                                <path d="M16 12h1"/>
                                <path d="M21 12v.01"/>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Divider -->
            <div class="divider">
                <span class="divider-text">OR</span>
            </div>

            <!-- Manual Entry Section -->
            <div class="manual-entry-section">
                <button class="manual-entry-btn" @onclick="ShowManualEntry">
                    Enter code manually
                </button>

                @if (_showManualEntry)
                {
                    <div class="code-input-section">
                        <EditForm Model="@_model" OnValidSubmit="@SubmitCode" class="code-form">
                            <DataAnnotationsValidator />

                            <div class="code-input-container">
                                <input type="text"
                                       @bind="_model.Code"
                                       class="code-input @(_validationErrors.ContainsKey("Code") ? "error" : "")"
                                       disabled="@_isLoading"
                                       placeholder="Enter your code"
                                       maxlength="20"
                                       @oninput="OnCodeInput" />
                                @if (_validationErrors.ContainsKey("Code"))
                                {
                                    <div class="field-error">@_validationErrors["Code"]</div>
                                }
                            </div>

                            <button type="submit"
                                    class="submit-btn @(_isLoading ? "loading" : "")"
                                    disabled="@(_isLoading || string.IsNullOrWhiteSpace(_model.Code))">
                                @if (_isLoading)
                                {
                                    <span class="loading-spinner"></span>
                                    <text>Connecting...</text>
                                }
                                else
                                {
                                    <text>Continue</text>
                                }
                            </button>
                        </EditForm>
                    </div>
                }
            </div>

            <!-- SMS Invite Section -->
            <div class="sms-section">
                <p class="sms-text">Or, get an invite via SMS</p>

                @if (!_showSmsEntry)
                {
                    <div class="sms-input-container">
                        <input type="tel"
                               @bind="_phoneNumber"
                               class="phone-input @(_validationErrors.ContainsKey("Phone") ? "error" : "")"
                               disabled="@_smsLoading"
                               placeholder="Phone number" />
                        <button class="send-invite-btn @(_smsLoading ? "loading" : "")"
                                @onclick="SendSmsInvite"
                                disabled="@(_smsLoading || string.IsNullOrWhiteSpace(_phoneNumber))">
                            @if (_smsLoading)
                            {
                                <span class="loading-spinner small"></span>
                            }
                            Send Invite
                        </button>
                    </div>
                    @if (_validationErrors.ContainsKey("Phone"))
                    {
                        <div class="field-error">@_validationErrors["Phone"]</div>
                    }
                }
                else
                {
                    <div class="sms-success">
                        <p>Invite sent to @_phoneNumber! Check your messages.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
.onboarding-page {
    min-height: 100vh;
    background: #F9F7F4; /* Cream background */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

/* Header */
.onboarding-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 24px;
    background: #F9F7F4;
}

.brand-logo {
    display: flex;
    align-items: center;
}

.logo-icon {
    font-size: 24px;
    margin-right: 8px;
}

.brand-name {
    font-size: 24px;
    font-weight: 600;
    color: #1F2937; /* Navy */
}

.help-btn {
    padding: 8px 16px;
    background: transparent;
    color: #6B7280;
    border: 1px solid #E5E7EB;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.help-btn:hover {
    background: #F3F4F6;
    color: #4B5563;
}

/* Main Container */
.onboarding-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    min-height: calc(100vh - 80px);
    padding: 60px 24px 40px;
}

.onboarding-content {
    width: 100%;
    max-width: 480px;
    text-align: center;
}

/* Title Section */
.title-section {
    margin-bottom: 48px;
}

.main-title {
    font-size: 36px;
    font-weight: 700;
    color: #1F2937; /* Navy */
    line-height: 1.2;
    margin: 0 0 16px 0;
}

.subtitle {
    font-size: 16px;
    color: #6B7280; /* Gray */
    line-height: 1.5;
    margin: 0;
}

/* QR Scanner Section */
.qr-section {
    margin-bottom: 48px;
}

.qr-scanner-container {
    display: flex;
    justify-content: center;
}

.qr-scanner {
    width: 200px;
    height: 200px;
    background: white;
    border: 2px solid #E5E7EB;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.06);
    position: relative;
    overflow: hidden;
}

.qr-scanner::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 20px;
    right: 20px;
    bottom: 20px;
    border: 2px solid #FF6B35;
    border-radius: 8px;
    opacity: 0.3;
}

.qr-icon {
    z-index: 1;
}

/* Divider */
.divider {
    margin: 32px 0;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
}

.divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: #E5E7EB;
}

.divider-text {
    background: #F9F7F4;
    color: #9CA3AF;
    font-size: 14px;
    font-weight: 500;
    padding: 0 16px;
    position: relative;
    z-index: 1;
}

/* Manual Entry Section */
.manual-entry-section {
    margin-bottom: 48px;
}

.manual-entry-btn {
    padding: 12px 24px;
    background: transparent;
    color: #6B7280;
    border: 1px solid #D1D5DB;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.manual-entry-btn:hover {
    background: #F9FAFB;
    border-color: #9CA3AF;
    color: #4B5563;
}

.code-input-section {
    margin-top: 24px;
}

.code-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.code-input-container {
    display: flex;
    flex-direction: column;
}

.code-input {
    width: 100%;
    padding: 16px 20px;
    border: 2px solid #E5E7EB;
    border-radius: 12px;
    font-size: 16px;
    background: white;
    color: #1F2937;
    transition: border-color 0.2s ease;
    outline: none;
    text-align: center;
}

.code-input::placeholder {
    color: #9CA3AF;
}

.code-input:focus {
    border-color: #FF6B35; /* Orange focus */
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
}

.code-input.error {
    border-color: #EF4444; /* Red error */
}

.code-input:disabled {
    background-color: #F3F4F6;
    color: #9CA3AF;
    cursor: not-allowed;
}

/* SMS Section */
.sms-section {
    padding-top: 32px;
    border-top: 1px solid #E5E7EB;
}

.sms-text {
    font-size: 14px;
    color: #6B7280;
    margin: 0 0 20px 0;
}

.sms-input-container {
    display: flex;
    gap: 12px;
    align-items: stretch;
}

.phone-input {
    flex: 1;
    padding: 12px 16px;
    border: 1px solid #D1D5DB;
    border-radius: 8px;
    font-size: 14px;
    background: white;
    color: #1F2937;
    transition: border-color 0.2s ease;
    outline: none;
}

.phone-input::placeholder {
    color: #9CA3AF;
}

.phone-input:focus {
    border-color: #FF6B35;
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
}

.phone-input.error {
    border-color: #EF4444;
}

.phone-input:disabled {
    background-color: #F3F4F6;
    color: #9CA3AF;
    cursor: not-allowed;
}

.send-invite-btn {
    padding: 12px 24px;
    background: #FF6B35; /* Orange */
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 6px;
    white-space: nowrap;
}

.send-invite-btn:hover:not(:disabled) {
    background: #E55A2E;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
}

.send-invite-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.sms-success {
    padding: 16px;
    background: #F0F9FF;
    border: 1px solid #0EA5E9;
    border-radius: 8px;
    color: #0369A1;
    font-size: 14px;
}

.sms-success p {
    margin: 0;
}

/* Submit Button */
.submit-btn {
    padding: 16px 32px;
    background: #FF6B35; /* Orange */
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    width: 100%;
}

.submit-btn:hover:not(:disabled) {
    background: #E55A2E;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
}

.submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Field Error */
.field-error {
    font-size: 12px;
    color: #EF4444; /* Red */
    margin-top: 6px;
    text-align: left;
}

/* Loading Spinner */
.loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
}

.loading-spinner.small {
    width: 16px;
    height: 16px;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Responsive Design */
@@media (max-width: 640px) {
    .onboarding-container {
        padding: 40px 16px 20px;
    }

    .main-title {
        font-size: 28px;
    }

    .qr-scanner {
        width: 160px;
        height: 160px;
    }

    .sms-input-container {
        flex-direction: column;
        gap: 12px;
    }

    .send-invite-btn {
        justify-content: center;
    }
}
</style>

@code {
    private readonly OnboardingModel _model = new();
    private bool _isLoading = false;
    private bool _showManualEntry = false;
    private bool _smsLoading = false;
    private bool _showSmsEntry = false;
    private string _phoneNumber = "";
    private readonly Dictionary<string, string> _validationErrors = new();

    private void ShowManualEntry()
    {
        _showManualEntry = true;
        StateHasChanged();
    }

    private void OnCodeInput(ChangeEventArgs e)
    {
        _model.Code = e.Value?.ToString() ?? "";
        if (_validationErrors.ContainsKey("Code"))
        {
            _validationErrors.Remove("Code");
            StateHasChanged();
        }
    }

    private async Task SubmitCode()
    {
        _validationErrors.Clear();

        // Validate code
        if (string.IsNullOrWhiteSpace(_model.Code))
        {
            _validationErrors["Code"] = "Code is required";
            StateHasChanged();
            return;
        }

        _isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("/client/connect", _model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ConnectResponse>();

                if (result != null)
                {
                    var userInfo = new UserInfo
                    {
                        UserId = result.UserId ?? "",
                        Email = result.Email ?? "",
                        UserType = "client",
                        Alias = result.Alias
                    };
                    await AuthState.SetUserAsync(userInfo, result.Token);

                    Snackbar.Add($"Connected to {result.TrainerName}!", Severity.Success);
                    Navigation.NavigateTo("/home/client");
                }
                else
                {
                    _validationErrors["Code"] = "Invalid response from server";
                }
            }
            else
            {
                _validationErrors["Code"] = "Invalid code. Please check with your therapist.";
            }
        }
        catch (Exception ex)
        {
            _validationErrors["Code"] = "Network error. Please check your connection.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SendSmsInvite()
    {
        _validationErrors.Clear();

        // Basic phone validation
        if (string.IsNullOrWhiteSpace(_phoneNumber))
        {
            _validationErrors["Phone"] = "Phone number is required";
            StateHasChanged();
            return;
        }

        // Remove non-digits for validation
        var digits = new string(_phoneNumber.Where(char.IsDigit).ToArray());
        if (digits.Length < 10)
        {
            _validationErrors["Phone"] = "Please enter a valid phone number";
            StateHasChanged();
            return;
        }

        _smsLoading = true;
        try
        {
            var smsRequest = new { PhoneNumber = _phoneNumber };
            var response = await Http.PostAsJsonAsync("/client/request-invite", smsRequest);

            if (response.IsSuccessStatusCode)
            {
                _showSmsEntry = true;
                Snackbar.Add("Invite sent! Check your messages.", Severity.Success);
            }
            else
            {
                _validationErrors["Phone"] = "Failed to send invite. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _validationErrors["Phone"] = "Network error. Please check your connection.";
        }
        finally
        {
            _smsLoading = false;
            StateHasChanged();
        }
    }

    public class OnboardingModel
    {
        public string Code { get; set; } = "";
    }

    public class ConnectResponse
    {
        public string? UserId { get; set; }
        public string? Email { get; set; }
        public string? Alias { get; set; }
        public string? Token { get; set; }
        public string? TrainerName { get; set; }
        public string? ClinicName { get; set; }
    }
}
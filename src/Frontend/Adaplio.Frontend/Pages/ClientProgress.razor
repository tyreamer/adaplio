@page "/progress"
@using Adaplio.Frontend.Components.Progress
@using Adaplio.Frontend.Models
@using Adaplio.Frontend.Services
@using System.Net.Http.Json
@using System.Text.Json
@using System.Linq
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject AuthStateService AuthState

<PageTitle>Your Progress - Adaplio</PageTitle>

@if (!_isAuthorized)
{
    return;
}

<div class="progress-page">
    <!-- Header with Navigation -->
    <div class="progress-header">
        <div class="header-content">
            <div class="brand-logo">
                <span class="logo-icon">ðŸ§¡</span>
                <span class="brand-name">Adaplio</span>
            </div>

            <!-- Navigation Tabs -->
            <div class="nav-tabs">
                <button class="nav-tab" @onclick="@(() => NavigationManager.NavigateTo("/home"))">Home</button>
                <button class="nav-tab" @onclick="@(() => NavigationManager.NavigateTo("/exercises"))">Exercises</button>
                <button class="nav-tab active">Progress</button>
                <button class="nav-tab" @onclick="@(() => NavigationManager.NavigateTo("/community"))">Community</button>
            </div>

            <div class="header-actions">
                <div class="notification-btn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#6B7280" stroke-width="2">
                        <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/>
                        <path d="M13.73 21a2 2 0 0 1-3.46 0"/>
                    </svg>
                </div>
                <div class="profile-avatar">
                    <div class="avatar-circle">
                        <span>A</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="progress-container">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-alert">
                <div class="alert-content">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#EF4444" stroke-width="2">
                        <circle cx="12" cy="12" r="10"/>
                        <line x1="12" y1="8" x2="12" y2="12"/>
                        <line x1="12" y1="16" x2="12.01" y2="16"/>
                    </svg>
                    <span>@errorMessage</span>
                </div>
            </div>
        }

        <!-- Page Title -->
        <div class="page-header">
            <h1 class="page-title">Your Progress</h1>
            <p class="page-subtitle">Keep up the great work! Consistency is key.</p>
        </div>

        <!-- Level Progress Section -->
        <div class="level-section">
            <div class="level-info">
                <div class="level-label">Level @_currentLevel</div>
                <div class="level-percentage">@_currentLevelProgress%</div>
            </div>
            <div class="level-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @(_currentLevelProgress)%"></div>
                </div>
                <div class="progress-text">@_xpToNextLevel XP to next level</div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-label">Total XP</div>
                <div class="stat-value">@_totalXP</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Days Active</div>
                <div class="stat-value">@_daysActive</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Exercises Completed</div>
                <div class="stat-value">@_exercisesCompleted</div>
            </div>
        </div>

        @if (isLoadingWeeklyProgress)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>Loading your progress...</p>
            </div>
        }
        else
        {
            <!-- Weekly Performance Chart -->
            <div class="weekly-section">
                <h2 class="section-title">Weekly Performance</h2>
                <div class="weekly-chart">
                    @{
                        var dayNames = new[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
                        var weeklyData = GetWeeklyData();
                        var maxValue = weeklyData.Any() ? weeklyData.Max() : 100;
                    }
                    @for (int i = 0; i < 7; i++)
                    {
                        var value = i < weeklyData.Count ? weeklyData[i] : 0;
                        var heightPercent = maxValue > 0 ? (value * 100.0 / maxValue) : 0;

                        <div class="chart-bar">
                            <div class="bar-container">
                                <div class="bar" style="height: @(heightPercent)%"></div>
                            </div>
                            <div class="day-label">@dayNames[i]</div>
                        </div>
                    }
                </div>
            </div>

            <!-- Achievements Section -->
            <div class="achievements-section">
                <h2 class="section-title">Achievements</h2>
                <div class="achievements-grid">
                    <div class="achievement-card earned">
                        <div class="achievement-icon orange">
                            <div class="badge-content">
                                <div class="badge-header">ATTENDANCE</div>
                                <div class="badge-main">NO SICK DAYS</div>
                                <div class="badge-company">ADAPLIO</div>
                            </div>
                        </div>
                    </div>
                    <div class="achievement-card earned">
                        <div class="achievement-icon dark">
                            <div class="badge-content">
                                <div class="badge-header">CONSISTENCY</div>
                                <div class="badge-main">DAILY STREAK</div>
                                <div class="badge-company">ADAPLIO</div>
                            </div>
                        </div>
                    </div>
                    <div class="achievement-card earned">
                        <div class="achievement-icon dark">
                            <div class="badge-content">
                                <div class="badge-number">10</div>
                                <div class="badge-text">DAYS STREAK</div>
                            </div>
                        </div>
                    </div>
                    <div class="achievement-card">
                        <div class="achievement-icon locked">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#9CA3AF" stroke-width="2">
                                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                                <circle cx="12" cy="16" r="1"/>
                                <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Daily Challenge Section -->
            <div class="daily-challenge-section">
                <div class="challenge-content">
                    <div class="challenge-info">
                        <h2 class="challenge-title">Daily Challenge</h2>
                        <p class="challenge-description">Complete 5 exercises today</p>
                        <p class="challenge-reward">Earn 20 XP</p>
                        <button class="challenge-btn" @onclick="StartDailyChallenge">Start</button>
                    </div>
                    <div class="challenge-illustration">
                        <div class="person-illustration">
                            <svg width="120" height="140" viewBox="0 0 120 140" fill="none">
                                <!-- Simple person illustration -->
                                <ellipse cx="60" cy="25" rx="15" ry="18" fill="#FFAA88"/>
                                <rect x="50" y="35" width="20" height="45" rx="10" fill="#4A90E2"/>
                                <rect x="45" y="45" width="30" height="25" rx="5" fill="#F5A623"/>
                                <rect x="52" y="80" width="8" height="35" rx="4" fill="#4A90E2"/>
                                <rect x="62" y="80" width="8" height="35" rx="4" fill="#4A90E2"/>
                                <ellipse cx="56" cy="120" rx="8" ry="4" fill="#333"/>
                                <ellipse cx="66" cy="120" rx="8" ry="4" fill="#333"/>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
.progress-page {
    min-height: 100vh;
    background: #F9F7F4; /* Cream background */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

/* Header */
.progress-header {
    background: white;
    border-bottom: 1px solid #E5E7EB;
    padding: 16px 24px;
    position: sticky;
    top: 0;
    z-index: 100;
}

.header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1200px;
    margin: 0 auto;
}

.brand-logo {
    display: flex;
    align-items: center;
}

.logo-icon {
    font-size: 24px;
    margin-right: 8px;
}

.brand-name {
    font-size: 24px;
    font-weight: 600;
    color: #1F2937; /* Navy */
}

.nav-tabs {
    display: flex;
    gap: 32px;
}

.nav-tab {
    background: none;
    border: none;
    color: #6B7280;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    padding: 8px 0;
    transition: color 0.2s ease;
    position: relative;
}

.nav-tab:hover {
    color: #374151;
}

.nav-tab.active {
    color: #FF6B35;
}

.nav-tab.active::after {
    content: '';
    position: absolute;
    bottom: -16px;
    left: 0;
    right: 0;
    height: 2px;
    background: #FF6B35;
}

.header-actions {
    display: flex;
    align-items: center;
    gap: 16px;
}

.notification-btn {
    padding: 8px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    border-radius: 8px;
}

.notification-btn:hover {
    background: #F3F4F6;
}

.profile-avatar {
    cursor: pointer;
}

.avatar-circle {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: #FF6B35;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 16px;
}

/* Main Content */
.progress-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 32px 24px;
}

/* Error Alert */
.error-alert {
    margin-bottom: 24px;
    padding: 16px;
    background: #FEF2F2;
    border: 1px solid #FECACA;
    border-radius: 8px;
}

.alert-content {
    display: flex;
    align-items: center;
    gap: 12px;
    color: #EF4444;
    font-size: 14px;
}

/* Page Header */
.page-header {
    margin-bottom: 32px;
}

.page-title {
    font-size: 32px;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 8px 0;
}

.page-subtitle {
    font-size: 16px;
    color: #6B7280;
    margin: 0;
}

/* Level Section */
.level-section {
    background: white;
    border-radius: 16px;
    padding: 24px;
    margin-bottom: 24px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.level-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.level-label {
    font-size: 18px;
    font-weight: 600;
    color: #1F2937;
}

.level-percentage {
    font-size: 18px;
    font-weight: 600;
    color: #FF6B35;
}

.level-progress .progress-bar {
    height: 12px;
    background: #F3F4F6;
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 8px;
}

.level-progress .progress-fill {
    height: 100%;
    background: #FF6B35;
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 14px;
    color: #6B7280;
    text-align: right;
}

/* Stats Section */
.stats-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 32px;
}

.stat-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    text-align: center;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.stat-label {
    font-size: 14px;
    color: #6B7280;
    margin-bottom: 8px;
}

.stat-value {
    font-size: 28px;
    font-weight: 700;
    color: #FF6B35;
}

/* Loading State */
.loading-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
    text-align: center;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid #E5E7EB;
    border-radius: 50%;
    border-top-color: #FF6B35;
    animation: spin 1s ease-in-out infinite;
    margin-bottom: 16px;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

.loading-state p {
    color: #6B7280;
    font-size: 16px;
    margin: 0;
}

/* Weekly Section */
.weekly-section {
    background: white;
    border-radius: 16px;
    padding: 24px;
    margin-bottom: 32px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.section-title {
    font-size: 20px;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 24px 0;
}

.weekly-chart {
    display: flex;
    align-items: end;
    gap: 24px;
    height: 120px;
    padding: 0 16px;
}

.chart-bar {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
}

.bar-container {
    flex: 1;
    width: 24px;
    display: flex;
    align-items: end;
    margin-bottom: 8px;
}

.bar {
    width: 100%;
    background: #FF6B35;
    border-radius: 4px 4px 0 0;
    min-height: 4px;
    transition: height 0.3s ease;
}

.day-label {
    font-size: 12px;
    color: #6B7280;
    font-weight: 500;
}

/* Achievements Section */
.achievements-section {
    margin-bottom: 32px;
}

.achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 16px;
}

.achievement-card {
    background: white;
    border-radius: 12px;
    padding: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    aspect-ratio: 1;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.achievement-icon {
    width: 100%;
    height: 100%;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    text-align: center;
    position: relative;
}

.achievement-icon.orange {
    background: #FF6B35;
}

.achievement-icon.dark {
    background: #1F2937;
}

.achievement-icon.locked {
    background: #F3F4F6;
    color: #9CA3AF;
}

.badge-content {
    font-size: 10px;
    line-height: 1.2;
}

.badge-header {
    font-size: 8px;
    opacity: 0.8;
    margin-bottom: 2px;
}

.badge-main {
    font-size: 10px;
    font-weight: 700;
    margin-bottom: 2px;
}

.badge-company {
    font-size: 8px;
    opacity: 0.8;
}

.badge-number {
    font-size: 24px;
    font-weight: 700;
    margin-bottom: 4px;
}

.badge-text {
    font-size: 10px;
}

/* Daily Challenge Section */
.daily-challenge-section {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.challenge-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 24px;
}

.challenge-info {
    flex: 1;
}

.challenge-title {
    font-size: 20px;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 8px 0;
}

.challenge-description {
    font-size: 16px;
    color: #4B5563;
    margin: 0 0 4px 0;
}

.challenge-reward {
    font-size: 14px;
    color: #FF6B35;
    font-weight: 500;
    margin: 0 0 16px 0;
}

.challenge-btn {
    padding: 12px 24px;
    background: #FF6B35;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.challenge-btn:hover {
    background: #E55A2E;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
}

.challenge-illustration {
    display: flex;
    align-items: center;
    justify-content: center;
    padding-left: 24px;
}

.person-illustration {
    opacity: 0.8;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .header-content {
        flex-direction: column;
        gap: 16px;
        align-items: stretch;
    }

    .nav-tabs {
        justify-content: space-between;
        gap: 16px;
    }

    .progress-container {
        padding: 20px 16px;
    }

    .page-title {
        font-size: 28px;
    }

    .level-info {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
    }

    .stats-section {
        grid-template-columns: 1fr;
    }

    .weekly-chart {
        gap: 12px;
        padding: 0 8px;
    }

    .achievements-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .challenge-content {
        flex-direction: column;
        text-align: center;
        gap: 24px;
    }

    .challenge-illustration {
        padding-left: 0;
    }
}

@@media (max-width: 640px) {
    .nav-tabs {
        display: none;
    }

    .header-actions {
        margin-left: auto;
    }
}
</style>

@code {
    private const string ExerciseCompletedType = "exercise_completed";
    private const string SetCompletedType = "set_completed";

    private List<ExerciseInfo> exerciseInstances = new();
    private AdherenceSummaryResponse? adherenceSummary;
    private WeeklyProgressResponse? weeklyProgressData;
    private ProgressLadderInput progressLadderInput = new();

    private bool isLoadingExercises = false;
    private bool isLoadingAdherence = false;
    private bool isLoadingWeeklyProgress = false;
    private bool isLoggingProgress = false;
    private bool isDarkMode = false;
    private string errorMessage = "";
    private bool _isAuthorized = false;

    // Progress data from API
    private int _currentLevel = 1;
    private int _currentLevelProgress = 0;
    private int _xpToNextLevel = 100;
    private int _totalXP = 0;
    private int _daysActive = 0;
    private int _exercisesCompleted = 0;

    private int? selectedExerciseId;
    private LogProgressRequest logRequest = new()
    {
        EventType = ExerciseCompletedType
    };

    protected override async Task OnInitializedAsync()
    {
        await AuthState.InitializeAsync();

        if (!AuthState.IsAuthenticated || !AuthState.IsClient)
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
        }

        _isAuthorized = true;
        await LoadExercises();
        await LoadWeeklyProgress();
        await LoadAdherenceSummary();
        await LoadGamificationData();
    }

    private async Task LoadExercises()
    {
        isLoadingExercises = true;
        errorMessage = "";

        try
        {
            // Load from client board API
            var response = await HttpClient.GetAsync("/api/client/board");

            if (response.IsSuccessStatusCode)
            {
                var boardData = await response.Content.ReadFromJsonAsync<ClientBoardResponse>();

                if (boardData?.Days != null)
                {
                    exerciseInstances = boardData.Days
                        .SelectMany(day => day.Exercises ?? Array.Empty<BoardExerciseDto>())
                        .Select(e => new ExerciseInfo
                        {
                            Id = e.ExerciseInstanceId,
                            ExerciseName = e.ExerciseName ?? "Unknown Exercise",
                            TargetSets = e.TargetSets,
                            TargetReps = e.TargetReps
                        })
                        .Distinct()
                        .ToList();
                }
                else
                {
                    exerciseInstances = new List<ExerciseInfo>();
                }
            }
            else
            {
                exerciseInstances = new List<ExerciseInfo>();
            }
        }
        catch (Exception)
        {
            errorMessage = "Failed to load exercises.";
            exerciseInstances = new List<ExerciseInfo>();
        }
        finally
        {
            isLoadingExercises = false;
        }
    }

    private async Task LoadAdherenceSummary()
    {
        isLoadingAdherence = true;

        try
        {
            var response = await HttpClient.GetAsync("/api/client/progress/summary");
            if (response.IsSuccessStatusCode)
            {
                adherenceSummary = await response.Content.ReadFromJsonAsync<AdherenceSummaryResponse>();
            }
        }
        catch (Exception)
        {
            // Silently fail for adherence summary
        }
        finally
        {
            isLoadingAdherence = false;
        }
    }

    private async Task LoadWeeklyProgress()
    {
        isLoadingWeeklyProgress = true;

        try
        {
            var response = await HttpClient.GetAsync("/api/client/progress/week");
            if (response.IsSuccessStatusCode)
            {
                weeklyProgressData = await response.Content.ReadFromJsonAsync<WeeklyProgressResponse>();

                if (weeklyProgressData != null)
                {
                    // Convert to ProgressLadderInput format
                    progressLadderInput = new ProgressLadderInput
                    {
                        Unit = weeklyProgressData.Unit == ProgressUnit.Xp ? ProgressUnit.Xp : ProgressUnit.Percent,
                        CurrentValue = weeklyProgressData.CurrentValue,
                        BreakEven = weeklyProgressData.BreakEven,
                        Tiers = weeklyProgressData.Tiers,
                        NextEstimate = weeklyProgressData.NextEstimate
                    };
                }
            }
        }
        catch (Exception)
        {
            // Silently fail for weekly progress
        }
        finally
        {
            isLoadingWeeklyProgress = false;
        }
    }

    private List<int> GetWeeklyData()
    {
        // Extract weekly data from adherence summary if available
        if (adherenceSummary?.WeeklyData != null && adherenceSummary.WeeklyData.Any())
        {
            // Get the last 7 weeks of data
            return adherenceSummary.WeeklyData
                .OrderByDescending(w => w.WeekStartDate)
                .Take(7)
                .OrderBy(w => w.WeekStartDate)
                .Select(w => (int)w.AdherencePercentage)
                .ToList();
        }

        // Default empty data if no API data available
        return new List<int> { 0, 0, 0, 0, 0, 0, 0 };
    }

    private async Task LoadGamificationData()
    {
        try
        {
            var response = await HttpClient.GetAsync("/api/client/gamification");

            if (response.IsSuccessStatusCode)
            {
                var gamificationData = await response.Content.ReadFromJsonAsync<GamificationResponse>();

                if (gamificationData != null)
                {
                    _currentLevel = gamificationData.CurrentLevel;
                    _totalXP = gamificationData.TotalXp;

                    // Calculate level progress
                    var xpForCurrentLevel = gamificationData.XpForCurrentLevel;
                    var xpForNextLevel = gamificationData.XpForNextLevel;
                    _xpToNextLevel = xpForNextLevel - gamificationData.TotalXp;

                    if (xpForNextLevel > xpForCurrentLevel)
                    {
                        var levelRange = xpForNextLevel - xpForCurrentLevel;
                        var progressInLevel = gamificationData.TotalXp - xpForCurrentLevel;
                        _currentLevelProgress = (int)((progressInLevel * 100.0) / levelRange);
                    }

                    // Set streak and achievement data
                    _daysActive = gamificationData.DailyStreak;

                    // Calculate exercises completed from adherence data
                    if (adherenceSummary?.WeeklyData != null)
                    {
                        _exercisesCompleted = adherenceSummary.WeeklyData.Sum(w => w.CompletedCount);
                    }
                }
            }
        }
        catch (Exception)
        {
            // Silently fail for gamification data
        }
    }

    private async Task StartDailyChallenge()
    {
        Snackbar.Add("Daily challenge started! Complete your exercises to earn XP.", Severity.Info);
        NavigationManager.NavigateTo("/board");
    }

    public class ExerciseInfo
    {
        public int Id { get; set; }
        public string ExerciseName { get; set; } = "";
        public int? TargetSets { get; set; }
        public int? TargetReps { get; set; }
    }

    public class LogProgressRequest
    {
        public int ExerciseInstanceId { get; set; }
        public string EventType { get; set; } = "";
        public int? SetsCompleted { get; set; }
        public int? RepsCompleted { get; set; }
        public int? HoldSecondsCompleted { get; set; }
        public int? DifficultyRating { get; set; }
        public int? PainLevel { get; set; }
        public string? Notes { get; set; }
    }

    public class WeeklyAdherence
    {
        public int Year { get; set; }
        public int WeekNumber { get; set; }
        public DateOnly WeekStartDate { get; set; }
        public decimal AdherencePercentage { get; set; }
        public int CompletedCount { get; set; }
        public int PlannedCount { get; set; }
    }

    public class LogProgressResponse
    {
        public string Message { get; set; } = "";
        public int ProgressEventId { get; set; }
        public CelebrationData? Celebration { get; set; }
    }

    public class CelebrationData
    {
        public int XpAwarded { get; set; }
        public bool LeveledUp { get; set; }
        public int? NewLevel { get; set; }
        public BadgeDto[] NewBadges { get; set; } = Array.Empty<BadgeDto>();
        public int CurrentStreak { get; set; }
    }

    public class BadgeDto
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Color { get; set; } = "";
        public string Rarity { get; set; } = "";
        public DateTimeOffset EarnedAt { get; set; }
    }

    public class AdherenceSummaryResponse
    {
        public string ClientAlias { get; set; } = "";
        public WeeklyAdherence[] WeeklyData { get; set; } = Array.Empty<WeeklyAdherence>();
        public decimal OverallAdherence { get; set; }
    }

    public record GamificationResponse(
        string ClientAlias,
        int CurrentLevel,
        int TotalXp,
        int XpForCurrentLevel,
        int XpForNextLevel,
        int DailyStreak,
        int WeeklyStreak,
        BadgeDto[] Badges
    );

    public record ClientBoardResponse(
        DateOnly WeekStart,
        DayExerciseDto[] Days
    );

    public record DayExerciseDto(
        DateOnly Date,
        string DayName,
        BoardExerciseDto[]? Exercises
    );

    public record BoardExerciseDto(
        int ExerciseInstanceId,
        int ExerciseId,
        string? ExerciseName,
        string? Instructions,
        string? Cautions,
        int? TargetSets,
        int? TargetReps,
        int? HoldSeconds,
        int? RestSeconds,
        string Status,
        int? SetsCompleted,
        int? RepsCompleted
    );
}
@page "/progress"
@using Adaplio.Frontend.Components.Progress
@using Adaplio.Frontend.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>My Progress - Adaplio</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-8">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @errorMessage
        </MudAlert>
    }

    <MudText Typo="Typo.h4" GutterBottom="true">
        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="mr-2" />
        My Weekly Progress
    </MudText>

    <MudGrid>
        <!-- Weekly Progress Ladder - Main Feature -->
        <MudItem xs="12" lg="8">
            <MudCard Class="pa-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="mr-2" />
                            Weekly Progress Ladder
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       Color="Color.Default"
                                       OnClick="LoadWeeklyProgress"
                                       Disabled="@isLoadingWeeklyProgress" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (isLoadingWeeklyProgress)
                    {
                        <div class="d-flex justify-center pa-8">
                            <MudProgressCircular Indeterminate="true" />
                            <MudText Class="ml-3">Loading your progress...</MudText>
                        </div>
                    }
                    else if (weeklyProgressData != null)
                    {
                        <ProgressLadder Data="@progressLadderInput"
                                        OnStartToday="@HandleStartToday"
                                        OnTierClick="@HandleTierClick"
                                        IsDarkMode="@isDarkMode"
                                        IsCompact="false" />

                        @if (weeklyProgressData.HasCelebration && !string.IsNullOrEmpty(weeklyProgressData.CelebrationMessage))
                        {
                            <MudAlert Severity="Severity.Success" Class="mt-4">
                                <MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.Celebration" Class="mr-2" />
                                    @weeklyProgressData.CelebrationMessage
                                </MudText>
                            </MudAlert>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-8">
                            Unable to load weekly progress. Please try refreshing.
                        </MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Quick Actions & Stats -->
        <MudItem xs="12" lg="4">
            <MudGrid>
                <!-- Quick Log Progress -->
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" />
                                    Quick Log
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (exerciseInstances.Any())
                            {
                                <MudSelect @bind-Value="selectedExerciseId"
                                           Label="Exercise"
                                           Variant="Variant.Outlined"
                                           Class="mb-3"
                                           Dense="true">
                                    @foreach (var exercise in exerciseInstances)
                                    {
                                        <MudSelectItem T="int?" Value="@exercise.Id">
                                            @exercise.ExerciseName
                                        </MudSelectItem>
                                    }
                                </MudSelect>

                                <MudSelect @bind-Value="logRequest.EventType"
                                           Label="Type"
                                           Variant="Variant.Outlined"
                                           Class="mb-3"
                                           Dense="true">
                                    <MudSelectItem T="string" Value="@ExerciseCompletedType">Exercise Done</MudSelectItem>
                                    <MudSelectItem T="string" Value="@SetCompletedType">Set Done</MudSelectItem>
                                </MudSelect>

                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           OnClick="LogProgress"
                                           Disabled="@(isLoggingProgress || selectedExerciseId == null)"
                                           FullWidth="true"
                                           StartIcon="@Icons.Material.Filled.Save">
                                    @if (isLoggingProgress)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-3">Logging...</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Log Progress</MudText>
                                    }
                                </MudButton>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center py-2">
                                    No exercises available
                                </MudText>
                                <MudButton Variant="Variant.Text"
                                           Color="Color.Primary"
                                           FullWidth="true"
                                           StartIcon="@Icons.Material.Filled.Assignment"
                                           Href="/exercises">
                                    View All Exercises
                                </MudButton>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Current Stats -->
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    <MudIcon Icon="@Icons.Material.Filled.Analytics" Class="mr-2" />
                                    This Week
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (weeklyProgressData != null)
                            {
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.h4" Color="Color.Primary" Class="text-center">
                                            @weeklyProgressData.CurrentValue
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center">
                                            XP Earned
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.h4" Color="@GetBreakEvenColor()" Class="text-center">
                                            @((int)((double)weeklyProgressData.CurrentValue / weeklyProgressData.BreakEven * 100))%
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center">
                                            vs Target
                                        </MudText>
                                    </MudItem>
                                </MudGrid>

                                @if (weeklyProgressData.NextEstimate != null)
                                {
                                    <MudDivider Class="my-3" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center">
                                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" Class="mr-1" />
                                        @weeklyProgressData.NextEstimate.SuggestedAction
                                    </MudText>
                                }
                            }
                            else
                            {
                                <MudSkeleton Height="60px" />
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>
        <!-- Detailed Progress Form -->
        <MudItem xs="12">
            <MudExpansionPanels Elevation="2">
                <MudExpansionPanel Text="Detailed Exercise Log">
                    <TitleContent>
                        <div style="display: flex; align-items: center">
                            <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" class="mr-3" />
                            <MudText>Detailed Exercise Log</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        @if (exerciseInstances.Any())
                        {
                            <MudForm @ref="progressForm">
                                <MudGrid>
                                    <MudItem xs="12" md="6">
                                        <MudSelect @bind-Value="selectedExerciseId"
                                                   Label="Select Exercise"
                                                   Variant="Variant.Outlined"
                                                   Class="mb-4">
                                            @foreach (var exercise in exerciseInstances)
                                            {
                                                <MudSelectItem T="int?" Value="@exercise.Id">
                                                    @exercise.ExerciseName (@exercise.TargetSets sets, @exercise.TargetReps reps)
                                                </MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudSelect @bind-Value="logRequest.EventType"
                                                   Label="Progress Type"
                                                   Variant="Variant.Outlined"
                                                   Class="mb-4">
                                            <MudSelectItem T="string" Value="@ExerciseCompletedType">Exercise Completed</MudSelectItem>
                                            <MudSelectItem T="string" Value="@SetCompletedType">Set Completed</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>

                                @if (logRequest.EventType == SetCompletedType || logRequest.EventType == ExerciseCompletedType)
                                {
                                    <MudGrid>
                                        <MudItem xs="4">
                                            <MudNumericField @bind-Value="logRequest.SetsCompleted"
                                                             Label="Sets Completed"
                                                             Variant="Variant.Outlined"
                                                             Min="0" />
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudNumericField @bind-Value="logRequest.RepsCompleted"
                                                             Label="Reps Completed"
                                                             Variant="Variant.Outlined"
                                                             Min="0" />
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudNumericField @bind-Value="logRequest.HoldSecondsCompleted"
                                                             Label="Hold Seconds"
                                                             Variant="Variant.Outlined"
                                                             Min="0" />
                                        </MudItem>
                                    </MudGrid>
                                }

                                <MudGrid Class="mt-4">
                                    <MudItem xs="6">
                                        <MudSelect @bind-Value="logRequest.DifficultyRating"
                                                   Label="Difficulty (1-10)"
                                                   Variant="Variant.Outlined">
                                            @for (int i = 1; i <= 10; i++)
                                            {
                                                <MudSelectItem T="int?" Value="@i">@i</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudSelect @bind-Value="logRequest.PainLevel"
                                                   Label="Pain Level (1-10)"
                                                   Variant="Variant.Outlined">
                                            @for (int i = 1; i <= 10; i++)
                                            {
                                                <MudSelectItem T="int?" Value="@i">@i</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>

                                <MudTextField @bind-Value="logRequest.Notes"
                                              Label="Notes (optional)"
                                              Variant="Variant.Outlined"
                                              Lines="3"
                                              Class="mt-4" />

                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           OnClick="LogProgress"
                                           Disabled="@(isLoggingProgress || selectedExerciseId == null || string.IsNullOrEmpty(logRequest.EventType))"
                                           StartIcon="@Icons.Material.Filled.Save"
                                           Class="mt-4">
                                    @if (isLoggingProgress)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-3">Logging...</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Log Detailed Progress</MudText>
                                    }
                                </MudButton>
                            </MudForm>
                        }
                        else if (isLoadingExercises)
                        {
                            <div class="d-flex justify-center pa-4">
                                <MudProgressCircular Indeterminate="true" />
                                <MudText Class="ml-3">Loading exercises...</MudText>
                            </div>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-4">
                                No exercises found. Contact your trainer to get started!
                            </MudText>
                        }
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>

        <!-- Adherence Summary -->
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Analytics" Class="mr-2" />
                            My Adherence Summary
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       Color="Color.Default"
                                       OnClick="LoadAdherenceSummary"
                                       Disabled="@isLoadingAdherence" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (isLoadingAdherence)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Indeterminate="true" />
                            <MudText Class="ml-3">Loading adherence data...</MudText>
                        </div>
                    }
                    else if (adherenceSummary != null)
                    {
                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <MudCard Outlined="true">
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h4" Color="Color.Primary">
                                            @adherenceSummary.OverallAdherence.ToString("F1")%
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Overall Adherence</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudCard Outlined="true">
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h4" Color="Color.Info">
                                            @(adherenceSummary.WeeklyData.LastOrDefault()?.AdherencePercentage.ToString("F1") ?? "0")%
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">This Week</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudCard Outlined="true">
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h4" Color="Color.Success">
                                            @adherenceSummary.WeeklyData.Length
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Weeks Tracked</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-4">
                            No adherence data available yet. Start logging progress to see your statistics!
                        </MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private const string ExerciseCompletedType = "exercise_completed";
    private const string SetCompletedType = "set_completed";

    private List<ExerciseInfo> exerciseInstances = new();
    private AdherenceSummaryResponse? adherenceSummary;
    private WeeklyProgressResponse? weeklyProgressData;
    private ProgressLadderInput progressLadderInput = new();
    private MudForm? progressForm;

    private bool isLoadingExercises = false;
    private bool isLoadingAdherence = false;
    private bool isLoadingWeeklyProgress = false;
    private bool isLoggingProgress = false;
    private bool isDarkMode = false;
    private string errorMessage = "";

    private int? selectedExerciseId;
    private LogProgressRequest logRequest = new()
    {
        EventType = ExerciseCompletedType
    };

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthAndRedirect();
        await LoadExercises();
        await LoadWeeklyProgress();
        await LoadAdherenceSummary();
    }

    private async Task CheckAuthAndRedirect()
    {
        try
        {
            var response = await HttpClient.GetAsync("/auth/me");
            if (!response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/auth/client/login");
                return;
            }

            var userInfo = await response.Content.ReadFromJsonAsync<JsonElement>();
            if (userInfo.GetProperty("userType").GetString() != "client")
            {
                NavigationManager.NavigateTo("/auth/client/login");
            }
        }
        catch
        {
            NavigationManager.NavigateTo("/auth/client/login");
        }
    }

    private async Task LoadExercises()
    {
        isLoadingExercises = true;
        errorMessage = "";

        try
        {
            // For now, create mock exercise instances since we don't have plan/exercise management yet
            exerciseInstances = new List<ExerciseInfo>
            {
                new() { Id = 1, ExerciseName = "Wall Push-ups", TargetSets = 3, TargetReps = 10 },
                new() { Id = 2, ExerciseName = "Shoulder Rolls", TargetSets = 2, TargetReps = 15 },
                new() { Id = 3, ExerciseName = "Neck Stretches", TargetSets = 1, TargetReps = 5 }
            };
        }
        catch (Exception)
        {
            errorMessage = "Failed to load exercises.";
        }
        finally
        {
            isLoadingExercises = false;
        }
    }

    private async Task LoadAdherenceSummary()
    {
        isLoadingAdherence = true;

        try
        {
            var response = await HttpClient.GetAsync("/api/client/progress/summary");
            if (response.IsSuccessStatusCode)
            {
                adherenceSummary = await response.Content.ReadFromJsonAsync<AdherenceSummaryResponse>();
            }
        }
        catch (Exception)
        {
            // Silently fail for adherence summary
        }
        finally
        {
            isLoadingAdherence = false;
        }
    }

    private async Task LogProgress()
    {
        if (selectedExerciseId == null) return;

        isLoggingProgress = true;
        errorMessage = "";

        try
        {
            logRequest.ExerciseInstanceId = selectedExerciseId.Value;

            var response = await HttpClient.PostAsJsonAsync("/api/client/progress", logRequest);

            if (response.IsSuccessStatusCode)
            {
                var logResponse = await response.Content.ReadFromJsonAsync<LogProgressResponse>();

                if (logResponse?.Celebration != null)
                {
                    await HandleCelebration(logResponse.Celebration);
                }
                else
                {
                    Snackbar.Add("Progress logged successfully!", Severity.Success);
                }

                // Reset form
                selectedExerciseId = null;
                logRequest = new LogProgressRequest { EventType = ExerciseCompletedType };

                // Refresh data
                await LoadWeeklyProgress();
                await LoadAdherenceSummary();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to log progress: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Network error: {ex.Message}";
        }
        finally
        {
            isLoggingProgress = false;
        }
    }

    private async Task HandleCelebration(CelebrationData celebration)
    {
        // Trigger confetti animation
        await JSRuntime.InvokeVoidAsync("triggerConfetti");

        // Show celebration snackbar
        var message = $"🎉 +{celebration.XpAwarded} XP earned!";
        if (celebration.LeveledUp && celebration.NewLevel.HasValue)
        {
            message += $" Level up to {celebration.NewLevel}! 🚀";
        }
        if (celebration.NewBadges.Any())
        {
            message += $" {celebration.NewBadges.Length} new badge(s) earned! 🏆";
        }

        Snackbar.Add(message, Severity.Success, config =>
        {
            config.VisibleStateDuration = 5000;
            config.ShowTransitionDuration = 300;
            config.HideTransitionDuration = 300;
        });

        // Show badge dialog if new badges were earned
        if (celebration.NewBadges.Any())
        {
            var parameters = new DialogParameters
            {
                { nameof(BadgeCelebrationDialog.NewBadges), celebration.NewBadges },
                { nameof(BadgeCelebrationDialog.XpAwarded), celebration.XpAwarded },
                { nameof(BadgeCelebrationDialog.LeveledUp), celebration.LeveledUp },
                { nameof(BadgeCelebrationDialog.NewLevel), celebration.NewLevel }
            };

            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = false
            };

            await DialogService.ShowAsync<BadgeCelebrationDialog>("🎉 Achievement Unlocked!", parameters, options);
        }
    }

    private async Task LoadWeeklyProgress()
    {
        isLoadingWeeklyProgress = true;

        try
        {
            var response = await HttpClient.GetAsync("/api/client/progress/week");
            if (response.IsSuccessStatusCode)
            {
                weeklyProgressData = await response.Content.ReadFromJsonAsync<WeeklyProgressResponse>();

                if (weeklyProgressData != null)
                {
                    // Convert to ProgressLadderInput format
                    progressLadderInput = new ProgressLadderInput
                    {
                        Unit = weeklyProgressData.Unit == ProgressUnit.Xp ? ProgressUnit.Xp : ProgressUnit.Percent,
                        CurrentValue = weeklyProgressData.CurrentValue,
                        BreakEven = weeklyProgressData.BreakEven,
                        Tiers = weeklyProgressData.Tiers,
                        NextEstimate = weeklyProgressData.NextEstimate
                    };
                }
            }
        }
        catch (Exception)
        {
            // Silently fail for weekly progress
        }
        finally
        {
            isLoadingWeeklyProgress = false;
        }
    }

    private async Task HandleStartToday()
    {
        // Scroll to or expand the detailed exercise log
        await JSRuntime.InvokeVoidAsync("scrollToElement", ".mud-expansion-panel");
    }

    private async Task HandleTierClick(ProgressTier tier)
    {
        var message = $"🎯 {tier.Label} Tier\n\nThreshold: {tier.Threshold} XP\nReward: {tier.Reward.Value}";

        if (weeklyProgressData?.CurrentValue >= tier.Threshold)
        {
            message += "\n\n✅ Achieved!";
        }
        else
        {
            var needed = tier.Threshold - (weeklyProgressData?.CurrentValue ?? 0);
            message += $"\n\n🎯 {needed} XP needed";
        }

        Snackbar.Add(message, Severity.Info, config =>
        {
            config.VisibleStateDuration = 4000;
        });
    }

    private Color GetBreakEvenColor()
    {
        if (weeklyProgressData == null) return Color.Default;

        var percentage = (double)weeklyProgressData.CurrentValue / weeklyProgressData.BreakEven;

        if (percentage >= 1.0) return Color.Success;
        if (percentage >= 0.7) return Color.Warning;
        return Color.Error;
    }

    public class ExerciseInfo
    {
        public int Id { get; set; }
        public string ExerciseName { get; set; } = "";
        public int? TargetSets { get; set; }
        public int? TargetReps { get; set; }
    }

    public class LogProgressRequest
    {
        public int ExerciseInstanceId { get; set; }
        public string EventType { get; set; } = "";
        public int? SetsCompleted { get; set; }
        public int? RepsCompleted { get; set; }
        public int? HoldSecondsCompleted { get; set; }
        public int? DifficultyRating { get; set; }
        public int? PainLevel { get; set; }
        public string? Notes { get; set; }
    }

    public class WeeklyAdherence
    {
        public int Year { get; set; }
        public int WeekNumber { get; set; }
        public DateOnly WeekStartDate { get; set; }
        public decimal AdherencePercentage { get; set; }
        public int CompletedCount { get; set; }
        public int PlannedCount { get; set; }
    }

    public class LogProgressResponse
    {
        public string Message { get; set; } = "";
        public int ProgressEventId { get; set; }
        public CelebrationData? Celebration { get; set; }
    }

    public class CelebrationData
    {
        public int XpAwarded { get; set; }
        public bool LeveledUp { get; set; }
        public int? NewLevel { get; set; }
        public BadgeDto[] NewBadges { get; set; } = Array.Empty<BadgeDto>();
        public int CurrentStreak { get; set; }
    }

    public class BadgeDto
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Color { get; set; } = "";
        public string Rarity { get; set; } = "";
        public DateTimeOffset EarnedAt { get; set; }
    }

    public class AdherenceSummaryResponse
    {
        public string ClientAlias { get; set; } = "";
        public WeeklyAdherence[] WeeklyData { get; set; } = Array.Empty<WeeklyAdherence>();
        public decimal OverallAdherence { get; set; }
    }
}

<script>
    window.triggerConfetti = () => {
        const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#dda0dd', '#98d8c8'];

        for (let i = 0; i < 50; i++) {
            const confetti = document.createElement('div');
            confetti.style.position = 'fixed';
            confetti.style.left = Math.random() * 100 + '%';
            confetti.style.top = '-10px';
            confetti.style.width = '10px';
            confetti.style.height = '10px';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.borderRadius = '50%';
            confetti.style.zIndex = '9999';
            confetti.style.pointerEvents = 'none';
            confetti.style.transition = 'transform 2s linear, opacity 2s linear';
            setTimeout(() => {
                confetti.style.transform = 'translateY(100vh) rotate(720deg)';
                confetti.style.opacity = '0';
            }, 100);

            document.body.appendChild(confetti);

            setTimeout(() => {
                if (confetti.parentNode) {
                    confetti.parentNode.removeChild(confetti);
                }
            }, 5000);
        }
    };

    // Using CSS transitions instead of keyframes to avoid Blazor parsing issues

    window.scrollToElement = (selector) => {
        const element = document.querySelector(selector);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
            // If it's an expansion panel, try to expand it
            const panel = element.querySelector('.mud-expand-panel-header');
            if (panel) {
                panel.click();
            }
        }
    };
</script>

<script src="~/js/progressLadder.js"></script>
@using Adaplio.Frontend.Services
@inject AuthStateService AuthState
@implements IDisposable

<MudNavMenu Class="nav-menu" Dense="true">
    @if (AuthState.IsAuthenticated)
    {
        @if (AuthState.IsClient)
        {
            <!-- Client Navigation -->
            <div class="nav-section">
                <MudText Class="nav-section-title" Typo="Typo.overline">Client</MudText>

                <MudNavLink Href="/home"
                            Icon="@Icons.Material.Filled.Home"
                            Class="nav-item">
                    Home
                </MudNavLink>

                <MudNavLink Href="/board"
                            Icon="@Icons.Material.Filled.CalendarToday"
                            Class="nav-item">
                    Weekly Board
                </MudNavLink>

                <MudNavLink Href="/proposals"
                            Icon="@Icons.Material.Filled.Assignment"
                            Class="nav-item">
                    Proposals
                </MudNavLink>

                <MudNavLink Href="/progress"
                            Icon="@Icons.Material.Filled.TrendingUp"
                            Class="nav-item">
                    Progress
                </MudNavLink>

                <MudNavLink Href="/rewards"
                            Icon="@Icons.Material.Filled.EmojiEvents"
                            Class="nav-item">
                    Rewards
                </MudNavLink>

                <MudNavLink Href="/trainers"
                            Icon="@Icons.Material.Filled.Groups"
                            Class="nav-item">
                    My Trainers
                </MudNavLink>
            </div>
        }
        else if (AuthState.IsTrainer)
        {
            <!-- Trainer Navigation -->
            <div class="nav-section">
                <MudText Class="nav-section-title" Typo="Typo.overline">Trainer</MudText>

                <MudNavLink Href="/home"
                            Icon="@Icons.Material.Filled.Home"
                            Class="nav-item">
                    Home
                </MudNavLink>

                <MudNavLink Href="/dashboard"
                            Icon="@Icons.Material.Filled.Dashboard"
                            Class="nav-item">
                    Dashboard
                </MudNavLink>

                <MudNavLink Href="/templates"
                            Icon="@Icons.Material.Filled.Assignment"
                            Class="nav-item">
                    Templates
                </MudNavLink>

                <MudNavLink Href="/proposals"
                            Icon="@Icons.Material.Filled.Send"
                            Class="nav-item">
                    Proposals
                </MudNavLink>

                <MudNavLink Href="/clients"
                            Icon="@Icons.Material.Filled.Group"
                            Class="nav-item">
                    Clients
                </MudNavLink>
            </div>
        }

        <MudDivider Class="nav-divider" />

        <!-- Account Section -->
        <div class="nav-section">
            <MudText Class="nav-section-title" Typo="Typo.overline">Account</MudText>

            <div class="user-info">
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Signed in as @GetUserDisplayName()
                </MudText>
                <MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined">
                    @(AuthState.IsClient ? "Client" : "Trainer")
                </MudChip>
            </div>

            <MudNavLink Href="/settings"
                        Icon="@Icons.Material.Filled.Settings"
                        Class="nav-item">
                Settings
            </MudNavLink>

            <MudButton Variant="Variant.Text"
                      Color="Color.Secondary"
                      StartIcon="@Icons.Material.Filled.Logout"
                      FullWidth="true"
                      Class="logout-btn"
                      OnClick="Logout">
                Sign Out
            </MudButton>
        </div>
    }
    else
    {
        <!-- Auth Section (when not signed in) -->
        <div class="nav-section">
            <MudText Class="nav-section-title" Typo="Typo.overline">Get Started</MudText>

            <MudNavLink Href="/auth/trainer/register"
                        Icon="@Icons.Material.Filled.PersonAdd"
                        Class="nav-item nav-cta">
                Start as Trainer
            </MudNavLink>

            <MudNavLink Href="/auth/client/login"
                        Icon="@Icons.Material.Filled.Login"
                        Class="nav-item">
                I'm a Client
            </MudNavLink>
        </div>
    }
</MudNavMenu>

<style>
.nav-menu {
    padding: 0 !important;
}

.nav-section {
    margin-bottom: var(--space-lg);
}

.nav-section-title {
    padding: var(--space-md) var(--space-lg) var(--space-sm) var(--space-lg);
    font-weight: var(--font-weight-semibold) !important;
    color: var(--mud-palette-text-secondary) !important;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: var(--font-size-xs) !important;
}

.nav-item {
    margin: 0 var(--space-md) var(--space-xs) var(--space-md) !important;
    border-radius: var(--radius-lg) !important;
    min-height: 44px !important;
    padding: var(--space-sm) var(--space-md) !important;
    transition: all var(--duration-fast) var(--easing-standard) !important;
    text-decoration: none !important;
    display: flex !important;
    align-items: center !important;
    position: relative;
}

.nav-item:hover {
    background-color: var(--mud-palette-action-hover) !important;
    transform: translateX(2px);
}

.nav-item.active {
    background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%) !important;
    color: var(--mud-palette-primary-contrast-text) !important;
    box-shadow: var(--elevation-2);
}

.nav-item.active .mud-icon,
.nav-item.active .nav-text {
    color: var(--mud-palette-primary-contrast-text) !important;
}

.nav-cta {
    background: var(--mud-palette-primary) !important;
    color: var(--mud-palette-primary-contrast-text) !important;
    box-shadow: var(--elevation-2);
}

.nav-cta .mud-icon,
.nav-cta .nav-text {
    color: var(--mud-palette-primary-contrast-text) !important;
}

.nav-cta:hover {
    background: var(--mud-palette-primary-darken) !important;
    box-shadow: var(--elevation-3);
    transform: translateX(2px) translateY(-1px);
}


.nav-divider {
    margin: var(--space-lg) var(--space-md) !important;
    opacity: 0.3;
}

/* Focus states for accessibility */
.nav-item:focus {
    outline: 2px solid var(--mud-palette-primary);
    outline-offset: 2px;
}

.nav-item:focus-visible {
    outline: 2px solid var(--mud-palette-primary);
    outline-offset: 2px;
}

.user-info {
    padding: var(--space-md) var(--space-lg);
    margin-bottom: var(--space-md);
    background: var(--mud-palette-background-grey);
    border-radius: var(--radius-md);
    margin-left: var(--space-md);
    margin-right: var(--space-md);
}

.logout-btn {
    margin: 0 var(--space-md) !important;
    border-radius: var(--radius-lg) !important;
    min-height: 44px !important;
    justify-content: flex-start !important;
}

</style>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnAuthStateChanged += StateHasChanged;

        if (!AuthState.IsAuthenticated)
        {
            await AuthState.InitializeAsync();
        }
    }

    private async Task Logout()
    {
        await AuthState.LogoutAsync();
        Navigation.NavigateTo("/");
    }

    private string GetUserDisplayName()
    {
        if (AuthState.IsClient)
        {
            // For clients, show nickname if available, otherwise show alias
            if (!string.IsNullOrWhiteSpace(AuthState.DisplayName))
            {
                return AuthState.DisplayName;
            }
            return AuthState.Alias ?? "Client";
        }
        else
        {
            // For trainers, show full name or email
            return AuthState.FullName ?? AuthState.Email ?? "Trainer";
        }
    }

    public void Dispose()
    {
        AuthState.OnAuthStateChanged -= StateHasChanged;
    }
}
